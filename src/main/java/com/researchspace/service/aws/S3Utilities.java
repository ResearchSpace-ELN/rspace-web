package com.researchspace.service.aws;

import com.researchspace.service.archive.export.ExportFailureException;
import java.io.File;
import java.net.URL;
import java.util.function.Function;
import software.amazon.awssdk.http.SdkHttpResponse;
import software.amazon.awssdk.services.s3.model.DeleteObjectResponse;

/** Interface containing utility method for interacting with S3 code in AWS SDK. */
public interface S3Utilities {
  /**
   * Checks if an object is stored in S3
   *
   * @param fileName the file name to check
   * @return true or false as to whether the object exists in S3
   */
  boolean isArchiveInS3(String fileName);

  /**
   * Generates a pre-signed url which can be used to download an object from S3, this will only
   * generate a url for an object that currently exists in S3 otherwise it will return null
   *
   * @param fileName the file name to generate the url for
   * @return URL the presigned url which can be used to download the object from S3
   * @throws ExportFailureException if an exception occurs while generating the pre-signed url.
   */
  URL getPresignedUrlForArchiveDownload(String fileName);

  /**
   * Gets a function to export a file to S3 using the aws sdk. Note that this is a blocking method,
   * it won't return until the the file has been completely uploaded and returned successfully.
   *
   * @param file The file to export
   * @return SdkHttpResponse received from aws
   * @throws ExportFailureException if an exception occurs during the export
   */
  Function<File, SdkHttpResponse> getS3Uploader(File file);

  /**
   * Deletes an object from s3 using the aws sdk, this is a blocking method and wont return until it
   * completes.
   *
   * @param fileName the file name to delete
   * @return DeleteObjectResponse the response object generated by aws
   * @throws ExportFailureException
   */
  DeleteObjectResponse deleteArchiveFromS3(String fileName);

  /** No-op implementation for when parameter hasS3Access is false. */
  public static final S3Utilities NOOP_S3Utilities =
      new S3Utilities() {

        @Override
        public boolean isArchiveInS3(String fileName) {
          return false;
        }

        @Override
        public URL getPresignedUrlForArchiveDownload(String fileName) {
          return null;
        }

        @Override
        public DeleteObjectResponse deleteArchiveFromS3(String fileName) {
          return null;
        }

        @Override
        public Function<File, SdkHttpResponse> getS3Uploader(File file) {
          return file2 -> SdkHttpResponse.builder().statusCode(400).build();
        }
      };
}
