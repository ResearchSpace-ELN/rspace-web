/**
 * Resize image plugin
 * Author: fran
 * Date: 23/09/2015
 */

tinymce.PluginManager.add('resizeimage', function(editor, url) {

	function createImageList(callback) {
		return function() {
			var imageList = editor.settings.image_list;

			if (typeof(imageList) == "string") {
				tinymce.util.XHR.send({
					url: imageList,
					success: function(text) {
						callback(tinymce.util.JSON.parse(text));
					}
				});
			} else if (typeof(imageList) == "function") {
				imageList(callback);
			} else {
				callback(imageList);
			}
		};
	}

	function showDialog(imageList) {
		var data = {}, dom = editor.dom, imgElm = editor.selection.getNode();
		var width, height, imageDimensions = editor.settings.image_dimensions !== false;

		function onSubmitForm(api) {
			function waitLoad(imgElm) {
				function selectImage() {
					imgElm.onload = imgElm.onerror = null;

					if (editor.selection) {
						editor.selection.select(imgElm);
						editor.nodeChanged();
					}
				}

				imgElm.onload = function() {
					if (!data.width && !data.height && imageDimensions) {
						dom.setAttribs(imgElm, {
							width: imgElm.clientWidth,
							height: imgElm.clientHeight
						});
					}

					selectImage();
				};

				imgElm.onerror = selectImage;
			}

			data = tinymce.extend(data, api.getData());

			if (!data.alt) {
				data.alt = '';
			}

			if (data.width === '') {
				data.width = null;
			}

			if (data.height === '') {
				data.height = null;
			}

			if (!data.style) {
				data.style = null;
			}

			// Setup new data excluding style properties
			data = {
				src: data.src,
				alt: data.alt,
				width: data.width,
				height: data.height,
				style: data.style,
				"class": data["class"]
			};
			
			editor.undoManager.transact(function() {
				if (!data.src) {
					if (imgElm) {
						dom.remove(imgElm);
						editor.focus();
						editor.nodeChanged();
					}

					return;
				}

				if (!imgElm) {
					data.id = '__mcenew';
					editor.focus();
					editor.selection.setContent(dom.createHTML('img', data));
					imgElm = dom.get('__mcenew');
					dom.setAttrib(imgElm, 'id', null);
				} else {
					dom.setAttribs(imgElm, data);
				}

				waitLoad(imgElm);
			});
		}

		function removePixelSuffix(value) {
			if (value) {
				value = value.replace(/px$/, '');
			}

			return value;
		}
		
		width = dom.getAttrib(imgElm, 'width');
		height = dom.getAttrib(imgElm, 'height');
		if (imgElm.nodeName == 'IMG' && !imgElm.getAttribute('data-mce-object') && !imgElm.getAttribute('data-mce-placeholder')) {
			data = {
				src: dom.getAttrib(imgElm, 'src'),
				alt: dom.getAttrib(imgElm, 'alt'),
				"class": dom.getAttrib(imgElm, 'class'),
				width: width,
				height: height,
				lock: true
			};
		} else {
			apprise("Please select an image to resize");
			return;
		}

		// recalculate width/heightt when locked
		function recalculateWidthHeight(settings, changed, dialogApi) {
			if(changed == 'height' && settings.lock) {
				dialogApi.setData({
					width: Math.round(parseInt(settings.height)*parseInt(data.width)/parseInt(data.height)).toString()
				});
			} else if(changed == 'width' && settings.lock) {
				dialogApi.setData({
					height: Math.round(parseInt(settings.width)*parseInt(data.height)/parseInt(data.width)).toString()
				});
			}
		}

		// recalculate style
		function recalculateStyle(api, data) {
			function addPixelSuffix(value) {
				if (value.length > 0 && /^[0-9]+$/.test(value)) {
					value += 'px';
				}
				return value;
			}

			if (!editor.settings.image_advtab) {
				return;
			}

			var css = dom.parseStyle(data.style);

			delete css.margin;
			css['margin-top'] = css['margin-bottom'] = addPixelSuffix(data.vspace);
			css['margin-left'] = css['margin-right'] = addPixelSuffix(data.hspace);
			css['border-width'] = addPixelSuffix(data.border);

			api.setData({
				style: dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css)))
			});
		}

		// get current inline styles
		if (imgElm) {
			data.hspace = removePixelSuffix(imgElm.style.marginLeft || imgElm.style.marginRight);
			data.vspace = removePixelSuffix(imgElm.style.marginTop || imgElm.style.marginBottom);
			data.border = removePixelSuffix(imgElm.style.borderWidth);
			data.style = editor.dom.serializeStyle(editor.dom.parseStyle(editor.dom.getAttrib(imgElm, 'style')));
		}

		// open dialog with inputs
		editor.windowManager.open({
			title: 'Resize image',
			initialData: data,
			body: {
				type: 'tabpanel',
				tabs: [
					{
						name: 'generaltab',
						title: 'General',
						type: 'form',
						items: [
							{
								label: 'Width',
								name: 'width',
								type: 'input'
							},
							{
								label: 'Height',
								name: 'height',
								type: 'input'
							},
							{
								label: 'Constrain proportions',
								name: 'lock',
								type: 'checkbox'
							},
						]
					},
					{
						name: 'advancedtab',
						title: 'Advanced',
						type: 'form',
						pack: 'start',
						items: [
							{
								label: 'Style',
								name: 'style',
								type: 'input'
							},
							{
								label: 'Vertical space',
								name: 'vspace',
								type: 'input'
							},
							{
								label: 'Horizontal space',
								name: 'hspace',
								type: 'input'
							},
							{
								label: 'Border',
								name: 'border',
								type: 'input'
							},
						]
					}
				]
			},
			buttons: [
				{
					type: 'cancel',
					text: 'Cancel'
				},
				{
					type: 'custom',
					text: 'Apply',
					primary: true,
					name: 'apply'
				}
			],
			onChange: function(dialogApi, input) {
				var $data = dialogApi.getData();

				recalculateWidthHeight($data, input.name, dialogApi);
				recalculateStyle(dialogApi, $data);
			},
			onAction: function(dialogApi, button) {
				if(button.name == 'apply') {
					onSubmitForm(dialogApi);
					dialogApi.close();
				}
			}
		});
	}

	editor.ui.registry.addButton('resizeimage', {
		icon: 'edit-image',
		tooltip: 'Resize image',
		onAction: function() { editor.execCommand("mceResizeImage"); }
	});

	editor.ui.registry.addMenuItem('resizeimage', {
		icon: 'edit-image',
		text: 'Resize image',
		onAction: function() { editor.execCommand("mceResizeImage"); }
	});

	editor.addCommand('mceResizeImage', createImageList(showDialog));
});
