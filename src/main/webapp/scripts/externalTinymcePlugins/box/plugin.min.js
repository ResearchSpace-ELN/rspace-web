/**
 * Box plugin
 * Author: Dave
 * Date : 16/11/2014
 */

tinymce.PluginManager.add('box', function (editor, url) {

  var filePickerSelection;
  var $askAboutLinkTypeDialog;

  var options = {
    clientId: boxClientId,
    linkType: 'shared',
    multiselect: false
  };

  var handleFilePickerSelection = function () {
    if (boxLinkTypePref === 'VERSIONED') {
      checkBoxAPIAvailableForUser(insertDetailedBoxLink);
    } else if (boxLinkTypePref === 'ASK') {
      askUserAboutLinkType();
    } else {
      insertSimpleBoxLink();
    }
  }

  var askUserAboutLinkType = function () {
    if (!$askAboutLinkTypeDialog) {
      initAskAboutLinkTypeDialog();
    }
    $('#boxLinkTypeDialog').dialog('open');
  }

  var insertSimpleBoxLink = function () {

    var iconPath;
    if (filePickerSelection.folder) {
      iconPath = '/images/icons/folder.png';
    } else {
      var extension = RS.getFileExtension(filePickerSelection.name);
      iconPath = RS.getIconPathForExtension(extension);
    }

    var json = {
      fileStore: 'box',
      id: 'box-' + filePickerSelection.id,
      recordURL: filePickerSelection.url,
      name: filePickerSelection.name,
      iconPath: iconPath,
      badgeIconPath: '/images/icons/box_cyan.png'
    };
    RS.insertTemplateIntoTinyMCE('insertedExternalDocumentTemplate', json);
  }

  var insertDetailedBoxLink = function () {

    RS.blockPage('Retrieving details from Box API...', true);

    // getting additional details from Box API
    var jqxhr = $.get('/box/boxResourceDetails', { boxId: filePickerSelection.id });

    jqxhr.done(function (result) {
      if (result.error) {
        if (result.error.errorMessages[0] === 'API_NO_VERSION_HISTORY') {
          apprise("Your Box account doesn't support Version History. Non-versioned link has been inserted.");
          insertSimpleBoxLink();
        } else if (result.error.errorMessages[0] === 'API_OTHER_ERROR') {
          apprise("Unexpected error occured when connecting to Box. Please try again.")
        }
        return;
      }

      var boxResource = result.data;
      if (boxResource) {
        if (boxResource.folder === true) {
          filePickerSelection.folder = true;
          insertSimpleBoxLink();
          return;
        }

        var extension = RS.getFileExtension(boxResource.name);
        var iconPath = RS.getIconPathForExtension(extension);

        var json = {
          id: boxResource.id,
          name: boxResource.name,
          recordURL: boxResource.sharedLinkUrl,
          description: boxResource.description,
          owner: boxResource.owner,
          iconPath: iconPath,
          versionID: boxResource.versionID,
          versionNumber: boxResource.versionNumber,
          sha1: boxResource.sha1,
          size: boxResource.size,
          createdAt: boxResource.createdAt
        };
        RS.insertTemplateIntoTinyMCE('insertedBoxVersionTemplate', json);
      }
    });
    jqxhr.fail(function () {
      RS.ajaxFailed("Retrieving details from Box", true, jqxhr);
    });
    jqxhr.always(function () { RS.unblockPage(); });
  }

  var initAskAboutLinkTypeDialog = function () {
    var dialogHtml = '<div id="boxLinkTypeDialog">'
      + '<div>Select Link Type</div>'
      + '<div class="boxLinkTypeLabel">'
      + '  <label>'
      + '    <input type="radio" name="boxLinkTypeValue" value="LIVE">Live</input>'
      + '  </label>'
      + '</div>'
      + '<div class="boxLinkTypeLabel">'
      + '  <label>'
      + '    <input type="radio" name="boxLinkTypeValue" value="VERSIONED">Versioned</input>'
      + '  </label>'
      + '</div>'
      + '<div class="boxLinkTypeRemember">'
      + '  <input type="checkbox" id="boxLinkTypeRememberCheckbox">Save as default</input>'
      + '</div>';
    $('body').append($(dialogHtml));

    RS.switchToBootstrapButton();
    $askAboutLinkTypeDialog = $('#boxLinkTypeDialog');
    $askAboutLinkTypeDialog.dialog({
      modal: true,
      title: 'Box Link Type',
      buttons: [
        {
          text: 'Insert',
          click: function () {
            var selected = $('input[name="boxLinkTypeValue"]:checked').val();
            if (!selected) {
              apprise('nothing');
              return;
            }
            if (selected === 'LIVE') {
              insertSimpleBoxLink();
            } else if (selected === 'VERSIONED') {
              checkBoxAPIAvailableForUser(insertDetailedBoxLink);
            }

            if (document.getElementById('boxLinkTypeRememberCheckbox').checked) {
              saveBoxLinkTypePreference(selected);
            }
            $askAboutLinkTypeDialog.dialog('close');
          }
        }, {
          text: 'Cancel',
          click: function () { $askAboutLinkTypeDialog.dialog('close'); }
        }
      ]
    });
    RS.switchToJQueryUIButton();
  }

  var saveBoxLinkTypePreference = function (linkType) {
    console.log('updating box type preference to: ' + linkType);

    $.get('/integration/integrationInfo', { name: 'BOX' }, function (integrationResponse) {
      var integration = integrationResponse.data;
      integration.options.BOX_LINK_TYPE = linkType;

      var jqxhr = RS.sendJsonPostRequestToUrl('/integration/update', integration);
      jqxhr.done(function (result) {
        var updateResult = result.data;

        if (updateResult) {
          boxLinkTypePref = updateResult.options.BOX_LINK_TYPE;
          $().toastmessage('showSuccessToast', 'Box Link Type preference updated');
        } else if (result.errorMsg) {
          $().toastmessage('showErrorToast', getValidationErrorString(result.errorMsg));
        }
      });
      jqxhr.fail(function () {
        RS.ajaxFailed("Update", false, jqxhr);
      });
    });
  }

  // Add command to open the comment dialog.htm
  editor.addCommand('cmdBox', function () {
    if (typeof BoxSelect === 'function') {
      var boxSelect = new BoxSelect(options);
      // Register a success callback handler
      boxSelect.success(function (response) {
        filePickerSelection = response[0];
        handleFilePickerSelection();
      });
      boxSelect.launchPopup();
    } else {
      apprise('Unable to contact Box. Please try again later or ensure that your network connection is active and reload the page.');
    }
  });

  // Add a button that opens a window
  editor.ui.registry.addButton('box', {
    icon: 'box_drive',
    tooltip: 'Insert from Box',
    onAction: function () { editor.execCommand("cmdBox"); },
  });

  // Adds a menu item to the insert menu
  editor.ui.registry.addMenuItem('optBox', {
    text: 'From Box',
    icon: 'box_drive',
    onAction: function () { editor.execCommand("cmdBox"); },
  });

  if(!window.insertActions) window.insertActions = new Map();
  window.insertActions.set("optBox", {
    text: 'From Box',
    icon: 'box_drive',
    action: () => {
      editor.execCommand('cmdBox');
    },
  });

});
