/**
 * Custom shortcuts plugin
 * Author: Kristiyan
 * Date : 22/06/2018
 */

tinymce.PluginManager.add('shortcuts', function (editor, url) {
  var default_shrtcuts, conf, shortcut;

  editor.addCommand('cmdRSCustomShortcuts', function () {
    editor.windowManager.openUrl({
      title: 'Configure keyboard shortcuts',
      url: url + '/dialog.html',
      width: 700,
      height: 550,
      buttons: [
        {
          type: 'cancel',
          text: 'Cancel'
        },
        {
          type: 'custom',
          name: 'reset',
          text: 'Reset'
        },
        {
          type: 'custom',
          name: 'resetDefault',
          text: 'Reset to default'
        },
        {
          type: 'custom',
          name: 'submit',
          text: 'Save',
          primary: true
        }
      ],
      onClose: function () {
        includeTinymceActionShortcuts(editor, url);
        includeTinymceSymbolShortcuts(editor, url);
      },
      onAction: (dialogApi, details) => {
        if (details.name === 'reset') {
          document.dispatchEvent(new Event('shortcuts-reset'));
        } else if (details.name === 'resetDefault') {
          document.dispatchEvent(new Event('shortcuts-resetDefault'));
        } else if (details.name === 'submit') {
          document.dispatchEvent(new Event('shortcuts-submit'));
          resetTinyMCE();
        } 
      }
    });
  });

  // add a button to the menu bar once the icon loads
  editor.ui.registry.addMenuItem('confShortcuts', {
    text: 'Shortcuts',
    icon: 'keyboard',
    onAction: function () { editor.execCommand("cmdRSCustomShortcuts"); },
  });

  $.when(
    jQuery.getJSON("/scripts/externalTinymcePlugins/shortcuts/config.json")
  ).done(function (json) {
    conf = json.config;
    default_shrtcuts = json.default;

    includeTinymceActionShortcuts(editor, url);
    includeTinymceSymbolShortcuts(editor, url);
  });

  function includeTinymceActionShortcuts(editor, url) {  
    var config = JSON.parse(localStorage.getItem('custom_shortcuts_actions'));

    if(!config) {
      config = JSON.parse(localStorage.getItem('custom_shortcuts')); // back compatibility
    }

    for (var key in config) {
      // add new shortcut
      shortcut = config[key] || default_shrtcuts[key];
      setNewShortcut(editor, toOS(shortcut), conf[key].description, conf[key].command);

      // add combination to tinymce navigation 
      if (conf[key].menu_item) {
        window.setTimeout(function () {
          $(`.mce-menu-item:contains('${conf[key].menu_item}')`)
            .append(`<div class="mce-menu-shortcut">${humanize(toOS(config[key]))}</div>`);
        }, 1000);
      }
    }
  }
  
  function includeTinymceSymbolShortcuts(editor, url) {
    let config = JSON.parse(localStorage.getItem('custom_shortcuts_symbols'));
  
    if(!config) {
      return;
    }
  
    Object.keys(config).map(function(key) {  
      // // add new shortcut
      shortcut = config[key] || default_shrtcuts[key];
      if(shortcut) {
        setNewShortcut(editor, toOS(shortcut), "Special character", "mceInsertContent", String.fromCharCode(key));
      }
    });
  }
  
  function setNewShortcut(editor, shortcut, description, command, val) {
    editor.shortcuts.add(shortcut, description, function () {
      if(val) {
        editor.execCommand(command, false, val);
      } else {
        editor.execCommand(command, false);
      }
    });
  }
  
  function humanize(combination) {
    if (combination) {
      combination = combination.replace(/Shift/g, '⇧');
  
      if (isMac()) {
        combination = combination.replace(/Alt/g, '⌥');
        combination = combination.replace(/Ctrl/g, '^');
        combination = combination.replace(/Meta/g, '⌘');
      } else {
        combination = combination.replace(/Meta/g, 'Win');
      }
    }
    return combination;
  }
  
  function toOS(combination) {
    if (isMac()) {
      combination = combination.replace(/control/g, 'Meta');
    } else {
      combination = combination.replace(/control/g, 'Ctrl');
    }
    return combination;
  }
  
  function isMac() {
    return navigator.platform.indexOf('Mac') > -1
  }
});