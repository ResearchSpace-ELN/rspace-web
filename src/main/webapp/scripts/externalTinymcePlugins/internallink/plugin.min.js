/**
 * Research Space link plugin
 * Author: fran
 * Date : 23/09/2015
 */

tinymce.PluginManager.add('internallink', function (editor, url) {
  editor.addCommand('cmdInternallink', function () {
    editor.windowManager.openUrl({
      title: 'Internal Link',
      url: '/externalTinymcePlugins/internalLink',
      width: 550,
      height: 460,
      buttons: [
        { 
          text: 'Cancel',
          type: 'cancel'
        },
        {
          text: 'Insert',
          type: 'custom',
          primary: true,
          name: 'insert'
        },
      ],
      onAction(api, button) {
        if(button.name == 'insert') {
          editor.fire('internallink-insert');
        }
      },
      onMessage(dialogApi, details) {
        if(details.mceAction == 'disable') {
          $("button[title='Insert']").attr('disabled', 'disabled');
        } else if(details.mceAction == 'enable') {
          $("button[title='Insert']").prop('disabled', null);
          $("button[title='Insert']").removeAttr('disabled');
        }
      }
    });
  });

  // Add a button that opens a window
  editor.ui.registry.addButton('internallink', {
    tooltip: 'Insert internal link',
    icon: 'internallink',
    onAction: function () {
      editor.execCommand("cmdInternallink");
    },
  });

  // Adds a menu item to the insert menu
  editor.ui.registry.addMenuItem('optInternallink', {
    text: 'Internal Link',
    icon: 'internallink',
    onAction: function () { editor.execCommand("cmdInternallink"); },
  });

  // Adds a menu item to the slash menu
  if(!window.insertActions) window.insertActions = new Map();
  window.insertActions.set("optInternallink", {
    text: 'Link',
    icon: 'internallink',
    action: () => {
      editor.execCommand('cmdInternallink');
    },
  });
});
