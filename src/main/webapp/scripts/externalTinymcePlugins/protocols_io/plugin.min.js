/**
 * ProtocolsIO integration plugin
 */

tinymce.PluginManager.add('protocols_io', function (editor, url) {

  protocols_ioEditor = editor;
  ProtocolsUrl = url;

  editor.addCommand('cmdProtocols_io', function () {
    editor.windowManager.openUrl({
      title: 'Protocols.io (beta)',
      url: url + '/iframe.html',
      width: 700,
      height: 500,
      buttons: [
        { 
          text: 'Close', 
          type: 'cancel' 
        },
        { 
          text: 'Import',
          name: 'import',
          primary: true,
          type: 'custom'
        }
      ],
      onAction(dialogApi, button) {
        if(button.name == 'import') {
          editor.fire('protocols-import');
        }
      },
      onMessage(dialogApi, details) {
        var button = $("button[title='Import']");
        if(details.mceAction == 'disable') {
          button.attr('disabled', 'disabled');
        } else if(details.mceAction == 'enable') {
          button.prop('disabled', null);
          button.removeAttr('disabled');
        }
      }
    });
  });

  // Add a button that opens a window
  editor.ui.registry.addButton('protocols_io', {
    tooltip: 'Import from Protocols.io',
    icon: 'protocolsio',
    onAction: function () {
      editor.execCommand("cmdProtocols_io");
    }
  });

  // Adds a menu item to the insert menu
  editor.ui.registry.addMenuItem('optProtocols_io', {
    text: 'From Protocols.io',
    icon: 'protocolsio',
    onAction: function () {
      editor.execCommand("cmdProtocols_io");
    },
  });

  // Adds a menu item to the slash menu
  if(!window.insertActions) window.insertActions = new Map();
  window.insertActions.set("optProtocols_io", {
    text: 'From Protocols.io',
    icon: 'protocolsio',
    action: () => {
      editor.execCommand("cmdProtocols_io");
    }
  });
});
