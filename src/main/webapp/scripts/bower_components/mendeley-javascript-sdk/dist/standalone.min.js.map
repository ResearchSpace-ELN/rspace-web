{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///standalone.min.js","webpack:///webpack/bootstrap d4316842d9d34eec0fcc","webpack:///./lib/index.js","webpack:///./lib/api.js","webpack:///./lib/utilities.js","webpack:///./lib/request.js","webpack:///./lib/api/annotations.js","webpack:///./lib/api/catalog.js","webpack:///./lib/api/documents.js","webpack:///./lib/api/files.js","webpack:///./lib/api/folders.js","webpack:///./lib/api/followers.js","webpack:///./lib/api/groups.js","webpack:///./lib/api/institutions.js","webpack:///./lib/api/locations.js","webpack:///./lib/api/metadata.js","webpack:///./lib/api/profiles.js","webpack:///./lib/api/trash.js","webpack:///./lib/auth.js","webpack:///./lib/notifier.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","API","Auth","Request","Notifier","__WEBPACK_AMD_DEFINE_RESULT__","require","utils","setAuthFlow","setBaseUrl","setNotifier","annotations","catalog","documents","files","folders","followers","groups","institutions","locations","metadata","profiles","trash","undefined","__WEBPACK_AMD_DEFINE_ARRAY__","auth","authFlow","url","baseUrl","newNotifier","notifier","requestFun","method","uriTemplate","uriVars","headers","args","Array","prototype","slice","arguments","getUrl","data","length","request","type","dataType","getRequestHeaders","settings","maxRetries","promise","create","send","done","response","setPaginationLinks","bind","requestPageFun","rel","paginationLinks","$","Deferred","reject","requestWithDataFun","followLocation","JSON","stringify","processData","requestWithFileFun","linkType","file","linkId","requestHeaders","extend","uploadHeaders","fileUpload","encodeRFC5987ValueChars","str","encodeURIComponent","replace","Content-Type","Content-Disposition","name","Link","uriProps","uriValues","uriParams","forEach","prop","i","expandUriTemplate","headerName","val","template","matches","match","hasOwnProperty","Error","count","parseInt","resetPaginationLinks","last","next","previous","apply","defaults","retries","authRetries","noopNotifier","notify","dfd","token","getToken","maxAuthRetries","refreshToken","Authorization","xhr","ajaxSettings","uploadEvent","upload","addEventListener","uploadProgressFun","ajax","fail","onFail","onDone","status","authenticate","success","locationHeader","getResponseHeader","redirect","extractHeaders","parse","error","resolve","refresh","when","refreshxhr","progressPercent","bytesTotal","bytesSent","progressEvent","eventType","lengthComputable","position","total","Math","round","event","percent","getAllResponseHeaders","headerValue","extractLinkHeaders","links","split","filter","row","RegExp","map","trim","substr","join","tokens","linksArray","value","l","dataHeaders","annotation","retrieve","patch","delete","list","nextPage","previousPage","lastPage","resetPagination","search","cloneDataHeaders","listDocuments","listFolder","createFromFile","createFromFileInGroup","update","clone","params","folderId","callParams","limit","Accept","remove","folder","document","removeDocument","addDocument","me","restore","destroy","implicitGrantFlow","options","defaultsImplicitFlow","clientId","console","redirectUrl","loc","win","location","protocol","host","pathname","apiAuthenticateUrl","scope","authenticateOnStart","getAccessTokenCookieOrUrl","noop","authCodeFlow","defaultsAuthCodeFlow","getAccessTokenCookie","refreshAccessTokenCookie","clearAccessTokenCookie","hash","cookie","setAccessTokenCookie","accessTokenCookieName","ca","charAt","substring","indexOf","accessToken","expireHours","d","Date","setTime","getTime","expires","toUTCString","refreshAccessTokenUrl","get","window","createMessage","notificationId","notificationData","notification","notifications","message","key","createNotifier","logger","minLogLevel","minCode","levelClass","code","debug","info","warn","startInfo","level","redirectInfo","successInfo","uploadProgressInfo","uploadSuccessInfo","commWarning","authWarning","reqError","commError","authError","refreshNotConfigured","refreshError","tokenError","parseError","uploadError"],"mappings":"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","file":"standalone.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MendeleySDK\"] = factory();\n\telse\n\t\troot[\"MendeleySDK\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MendeleySDK\"] = factory();\n\telse\n\t\troot[\"MendeleySDK\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Exports Mendeley SDK\n\tmodule.exports = {\n\t    API: __webpack_require__(1),\n\t    Auth: __webpack_require__(16),\n\t    Request: __webpack_require__(3),\n\t    Notifier: __webpack_require__(17)\n\t};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {\n\t    'use strict';\n\t\n\t    var utils = __webpack_require__(2);\n\t\n\t    /**\n\t     * API\n\t     *\n\t     * @namespace\n\t     * @name api\n\t     */\n\t    return {\n\t        setAuthFlow: utils.setAuthFlow,\n\t        setBaseUrl:  utils.setBaseUrl,\n\t        setNotifier: utils.setNotifier,\n\t\n\t        annotations: __webpack_require__(4)(),\n\t        catalog: __webpack_require__(5)(),\n\t        documents: __webpack_require__(6)(),\n\t        files: __webpack_require__(7)(),\n\t        folders: __webpack_require__(8)(),\n\t        followers: __webpack_require__(9)(),\n\t        groups: __webpack_require__(10)(),\n\t        institutions: __webpack_require__(11)(),\n\t        locations: __webpack_require__(12)(),\n\t        metadata: __webpack_require__(13)(),\n\t        profiles: __webpack_require__(14)(),\n\t        trash: __webpack_require__(15)()\n\t    };\n\t\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Request) {\n\t\n\t    'use strict';\n\t\n\t    var baseUrl = 'https://api.mendeley.com';\n\t    var authFlow = false;\n\t    var notifier = false;\n\t\n\t    /**\n\t     * Utilities\n\t     *\n\t     * @namespace\n\t     * @name utilities\n\t     */\n\t    return {\n\t        setAuthFlow: setAuthFlow,\n\t        setBaseUrl: setBaseUrl,\n\t        setNotifier: setNotifier,\n\t\n\t        requestFun: requestFun,\n\t        requestPageFun: requestPageFun,\n\t        requestWithDataFun: requestWithDataFun,\n\t        requestWithFileFun: requestWithFileFun,\n\t\n\t        resetPaginationLinks: resetPaginationLinks\n\t    };\n\t\n\t    function setAuthFlow(auth) {\n\t        authFlow = auth;\n\t    }\n\t\n\t    function setBaseUrl(url) {\n\t        baseUrl = url;\n\t    }\n\t\n\t    function setNotifier(newNotifier) {\n\t        notifier = newNotifier;\n\t    }\n\t\n\t    /**\n\t     * A general purpose request functions\n\t     *\n\t     * @private\n\t     * @param {string} method\n\t     * @param {string} uriTemplate\n\t     * @param {array} uriVars\n\t     * @param {array} headers\n\t     * @returns {function}\n\t     */\n\t    function requestFun(method, uriTemplate, uriVars, headers) {\n\t\n\t        uriVars = uriVars || [];\n\t\n\t        return function() {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            var url = getUrl(uriTemplate, uriVars, args);\n\t            var data = args[uriVars.length];\n\t            var request = {\n\t                type: method,\n\t                dataType: 'json',\n\t                url: url,\n\t                headers: getRequestHeaders(headers),\n\t                data: data\n\t            };\n\t            var settings = {\n\t                authFlow: authFlow\n\t            };\n\t\n\t            if (method === 'GET') {\n\t                settings.maxRetries = 1;\n\t            }\n\t\n\t            var promise = Request.create(request, settings, notifier).send();\n\t            promise.done(function(response, headers) {\n\t                setPaginationLinks.call(this, headers);\n\t            }.bind(this));\n\t\n\t            return promise;\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Get a function for getting a pagination rel\n\t     *\n\t     * @private\n\t     * @param {string} rel - One of \"next\", \"prev\" or \"last\"\n\t     * @returns {function}\n\t     */\n\t    function requestPageFun(rel) {\n\t\n\t        return function() {\n\t            if (!this.paginationLinks[rel]) {\n\t                return new $.Deferred().reject();\n\t            }\n\t\n\t            var request = {\n\t                type: 'GET',\n\t                dataType: 'json',\n\t                url: this.paginationLinks[rel],\n\t                headers: getRequestHeaders({})\n\t            };\n\t\n\t            var settings = {\n\t                authFlow: authFlow,\n\t                maxRetries: 1\n\t            };\n\t\n\t            var promise = Request.create(request, settings, notifier).send();\n\t            promise.done(function(response, headers) {\n\t                setPaginationLinks.call(this, headers);\n\t            }.bind(this));\n\t\n\t            return promise;\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Get a request function that sends data i.e. for POST, PUT, PATCH\n\t     * The data will be taken from the calling argument after any uriVar arguments.\n\t     *\n\t     * @private\n\t     * @param {string} method - The HTTP method\n\t     * @param {string} uriTemplate - A URI template e.g. /documents/{id}\n\t     * @param {array} uriVars - The variables for the URI template in the order\n\t     * they will be passed to the function e.g. ['id']\n\t     * @param {object} headers - Any additional headers to send\n\t     *  e.g. { 'Content-Type': 'application/vnd.mendeley-documents+1.json'}\n\t     * @param {bool} followLocation - follow the returned location header? Default is false\n\t     * @returns {function}\n\t     */\n\t    function requestWithDataFun(method, uriTemplate, uriVars, headers, followLocation) {\n\t        uriVars = uriVars || [];\n\t\n\t        return function() {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            var url = getUrl(uriTemplate, uriVars, args);\n\t            var data = args[uriVars.length];\n\t            var request = {\n\t                type: method,\n\t                url: url,\n\t                headers: getRequestHeaders(headers, data),\n\t                data: JSON.stringify(data),\n\t                processData: false\n\t            };\n\t\n\t            var settings = {\n\t                authFlow: authFlow,\n\t                followLocation: followLocation\n\t            };\n\t\n\t            return Request.create(request, settings, notifier).send();\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Get a request function that sends a file\n\t     *\n\t     * @private\n\t     * @param {string} method\n\t     * @param {string} uriTemplate\n\t     * @param {string} linkType - Type of the element to link this file to\n\t     * @param {object} headers - Any additional headers to send\n\t     * @returns {function}\n\t     */\n\t    function requestWithFileFun(method, uriTemplate, linkType, headers) {\n\t\n\t        return function() {\n\t\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            var url = getUrl(uriTemplate, [], args);\n\t            var file = args[0];\n\t            var linkId = args[1];\n\t            var requestHeaders = $.extend(true, {}, headers, getRequestHeaders(uploadHeaders(file, linkId, linkType), method));\n\t            var request = {\n\t                type: method,\n\t                url: url,\n\t                headers: requestHeaders,\n\t                data: file,\n\t                processData: false\n\t            };\n\t\n\t            var settings = {\n\t                authFlow: authFlow,\n\t                fileUpload: true\n\t            };\n\t\n\t            return Request.create(request, settings, notifier).send();\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Provide the correct encoding for UTF-8 Content-Disposition header value.\n\t     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\t     *\n\t     * @private\n\t     * @param {string} str\n\t     * @returns {string}\n\t     */\n\t    function encodeRFC5987ValueChars(str) {\n\t        return encodeURIComponent(str).\n\t            replace(/'/g, '%27').\n\t            replace(/\\(/g, '%28').\n\t            replace(/\\)/g, '%29').\n\t            replace(/\\*/g, '%2A');\n\t    }\n\t\n\t    /**\n\t     * Get headers for an upload\n\t     *\n\t     * @private\n\t     * @param {object} file\n\t     * @param {string} documentId\n\t     * @returns {string}\n\t     */\n\t    function uploadHeaders(file, linkId, linkType) {\n\t        var headers = {\n\t            'Content-Type': !!file.type ? file.type : 'application/octet-stream',\n\t            'Content-Disposition': 'attachment; filename*=UTF-8\\'\\'' + encodeRFC5987ValueChars(file.name)\n\t        };\n\t        if (linkType && linkId) {\n\t            switch(linkType) {\n\t                case 'group':\n\t                    headers.Link = '<' + baseUrl + '/groups/' + linkId +'>; rel=\"group\"';\n\t                    break;\n\t                case 'document':\n\t                    headers.Link = '<' + baseUrl + '/documents/' + linkId +'>; rel=\"document\"';\n\t                    break;\n\t            }\n\t        }\n\t\n\t        return headers;\n\t    }\n\t\n\t    /**\n\t     * Generate a URL from a template with properties and values\n\t     *\n\t     * @private\n\t     * @param {string} uriTemplate\n\t     * @param {array} uriProps\n\t     * @param {array} uriValues\n\t     * @returns {string}\n\t     */\n\t    function getUrl(uriTemplate, uriProps, uriValues) {\n\t        if (!uriProps.length) {\n\t            return baseUrl + uriTemplate;\n\t        }\n\t        var uriParams = {};\n\t        uriProps.forEach(function(prop, i) {\n\t            uriParams[prop] = uriValues[i];\n\t        });\n\t\n\t        return baseUrl + expandUriTemplate(uriTemplate, uriParams);\n\t    }\n\t\n\t    /**\n\t     * Get the headers for a request\n\t     *\n\t     * @private\n\t     * @param {array} headers\n\t     * @param {array} data\n\t     * @returns {array}\n\t     */\n\t    function getRequestHeaders(headers, data) {\n\t        for (var headerName in headers) {\n\t            var val = headers[headerName];\n\t            if (typeof val === 'function') {\n\t                headers[headerName] = val(data);\n\t            }\n\t        }\n\t\n\t        return headers;\n\t    }\n\t\n\t    /**\n\t     * Populate a URI template with data\n\t     *\n\t     * @private\n\t     * @param {string} template\n\t     * @param {object} data\n\t     * @returns {string}\n\t     */\n\t    function expandUriTemplate(template, data) {\n\t        var matches = template.match(/\\{[a-z]+\\}/gi);\n\t        matches.forEach(function(match) {\n\t            var prop = match.replace(/[\\{\\}]/g, '');\n\t            if (!data.hasOwnProperty(prop)) {\n\t                throw new Error('Endpoint requires ' + prop);\n\t            }\n\t            template = template.replace(match, data[prop]);\n\t        });\n\t\n\t        return template;\n\t    }\n\t\n\t    /**\n\t     * Set the current pagination links for a given API by extracting\n\t     * looking at the headers retruend with the response.\n\t     *\n\t     * @private\n\t     * @param {object} headers\n\t     */\n\t    function setPaginationLinks(headers) {\n\t        if (headers.hasOwnProperty('Mendeley-Count')) {\n\t            this.count = parseInt(headers['Mendeley-Count'], 10);\n\t        }\n\t\n\t        if (!headers.hasOwnProperty('Link') || typeof headers.Link !== 'object') {\n\t            return ;\n\t        }\n\t\n\t        for (var p in this.paginationLinks) {\n\t            this.paginationLinks[p] = headers.Link.hasOwnProperty(p) ? headers.Link[p] : false;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Reset the pagination links\n\t     *\n\t     * @private\n\t     */\n\t    function resetPaginationLinks() {\n\t        this.paginationLinks = {\n\t            last: false,\n\t            next: false,\n\t            previous: false\n\t        };\n\t        this.count = 0;\n\t    }\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\n\t    'use strict';\n\t\n\t    var defaults = {\n\t        authFlow: false,\n\t        maxRetries: 0,\n\t        maxAuthRetries: 1,\n\t        followLocation: false,\n\t        fileUpload: false,\n\t        extractHeaders: ['Mendeley-Count', 'Link']\n\t    };\n\t    var noopNotifier = { notify: function() {}};\n\t\n\t    function create(request, settings, notifier) {\n\t        return new Request(request, $.extend({}, defaults, settings), notifier);\n\t    }\n\t\n\t    function Request(request, settings, notifier) {\n\t        if (!settings.authFlow) {\n\t            throw new Error('Please provide an authentication interface');\n\t        }\n\t        this.request = request;\n\t        this.settings = settings;\n\t        this.retries = 0;\n\t        this.authRetries = 0;\n\t        this.notifier = notifier || noopNotifier;\n\t\n\t        this.notifier.notify('startInfo', [this.request.type, this.request.url], this.request);\n\t    }\n\t\n\t    function send(dfd, request) {\n\t\n\t        dfd = dfd || $.Deferred();\n\t        request = request || this.request;\n\t        request.headers = request.headers || {};\n\t        var token = this.settings.authFlow.getToken();\n\t        // If no token at all (cookie deleted or expired) refresh token if possible or authenticate\n\t        // because if you send 'Bearer ' you get a 400 rather than a 401 - is that a bug in the api?\n\t        if (!token) {\n\t            this.authRetries++;\n\t            this.notifier.notify('authWarning', ['n.a.', this.authRetries, this.settings.maxAuthRetries], this.request);\n\t            refreshToken.call(this, dfd);\n\t            return dfd.promise();\n\t        }\n\t\n\t        request.headers.Authorization = 'Bearer ' + token;\n\t\n\t        if (this.settings.fileUpload) {\n\t            // Undocumented way to access XHR so we can add upload progress listeners\n\t            var xhr = $.ajaxSettings.xhr();\n\t            request.xhr = function() { return xhr; };\n\t\n\t            // The response may have JSON Content-Type which makes jQuery invoke JSON.parse\n\t            // on the reponse, but there isn't one so there's an error which causes the deferred\n\t            // to be rejected. Specifying a dataType of 'text' prevents this.\n\t            request.dataType = 'text';\n\t\n\t            // Decorate the xhr with upload progress events\n\t            ['loadstart', 'loadend', 'load', 'progress', 'abort', 'error', 'timeout']\n\t                .forEach(function(uploadEvent) {\n\t                    xhr.upload.addEventListener(uploadEvent, uploadProgressFun.call(this, dfd, request, xhr));\n\t                }.bind(this));\n\t        }\n\t\n\t        $.ajax(request)\n\t            .fail(onFail.bind(this, dfd))\n\t            .done(onDone.bind(this, dfd));\n\t\n\t        return dfd.promise();\n\t    }\n\t\n\t    function onFail(dfd, xhr) {\n\t        switch (xhr.status) {\n\t            case 0:\n\t            case 504:\n\t                // 504 Gateway timeout or communication error\n\t                if (this.retries < this.settings.maxRetries) {\n\t                    this.retries++;\n\t                    this.notifier.notify('commWarning', [xhr.status, this.retries, this.settings.maxRetries], this.request, xhr);\n\t                    this.send(dfd);\n\t                } else {\n\t                    this.notifier.notify('commError', [xhr.status, this.settings.maxRetries], this.request, xhr);\n\t                    dfd.reject(this.request, xhr);\n\t                }\n\t                break;\n\t\n\t            case 401:\n\t                // 401 Unauthorized\n\t                if (this.authRetries < this.settings.maxAuthRetries) {\n\t                    this.authRetries++;\n\t                    this.notifier.notify('authWarning', [xhr.status, this.authRetries, this.settings.maxAuthRetries], this.request, xhr);\n\t                    refreshToken.call(this, dfd, xhr);\n\t                } else {\n\t                    this.notifier.notify('authError', [xhr.status, this.settings.maxAuthRetries], this.request, xhr);\n\t                    dfd.reject(this.request, xhr);\n\t                    this.settings.authFlow.authenticate(200);\n\t                }\n\t                break;\n\t\n\t            default:\n\t                this.notifier.notify('reqError', [xhr.status], this.request, xhr);\n\t                dfd.reject(this.request, xhr);\n\t        }\n\t    }\n\t\n\t    function onDone(dfd, response, success, xhr) {\n\t\n\t        var locationHeader = getResponseHeader(xhr, 'Location'),\n\t            headers;\n\t\n\t        if (locationHeader && this.settings.followLocation && xhr.status === 201) {\n\t            var redirect = {\n\t                type: 'GET',\n\t                url: locationHeader,\n\t                dataType: 'json'\n\t            };\n\t            this.notifier.notify('redirectInfo', null, this.request, redirect);\n\t            this.send(dfd, redirect);\n\t        } else {\n\t            if (this.settings.extractHeaders) {\n\t                headers = extractHeaders.call(this, xhr);\n\t            }\n\t\n\t            // File uploads have type set to text, so if there is some JSON parse it manually\n\t            if (this.settings.fileUpload) {\n\t                if (response) {\n\t                    try {\n\t                        response = JSON.parse(response);\n\t                    } catch (error) {\n\t                        this.notifier.notify('parseError', null, this.request, xhr);\n\t                        dfd.reject(error);\n\t                        return;\n\t                    }\n\t                }\n\t                this.notifier.notify('uploadSuccessInfo', null, this.request, response);\n\t                dfd.resolve(response, xhr);\n\t            } else {\n\t                this.notifier.notify('successInfo', null, this.request, response);\n\t                dfd.resolve(response, headers);\n\t            }\n\t        }\n\t    }\n\t\n\t    function refreshToken(dfd, xhr) {\n\t        var refresh = this.settings.authFlow.refreshToken();\n\t        if (refresh) {\n\t            $.when(refresh)\n\t                // If OK update the access token and re-send the request\n\t                .done(function() {\n\t                    this.send(dfd);\n\t                }.bind(this))\n\t                // If fails then we need to re-authenticate\n\t                .fail(function(refreshxhr) {\n\t                    this.notifier.notify('refreshError', [refreshxhr.status], this.request, refreshxhr);\n\t                    dfd.reject(this.request, xhr);\n\t                    this.settings.authFlow.authenticate(200);\n\t                }.bind(this));\n\t        } else {\n\t            this.notifier.notify('refreshNotConfigured', []);\n\t            dfd.reject(this.request, xhr);\n\t            this.settings.authFlow.authenticate(200);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Get a function to monitor upload progress and emit notify events\n\t     * on a deferred.\n\t     *\n\t     * @private\n\t     * @param {object} dfd - Deferred\n\t     * @param {object} request - The original request\n\t     * @param {object} xhr The original XHR\n\t     */\n\t    function uploadProgressFun(dfd, request, xhr) {\n\t        var progressPercent;\n\t        var bytesTotal;\n\t        var bytesSent;\n\t\n\t        return function(progressEvent) {\n\t            var eventType = progressEvent.type;\n\t\n\t            if (progressEvent.lengthComputable) {\n\t                bytesSent = progressEvent.loaded || progressEvent.position; // position is deprecated\n\t                bytesTotal = progressEvent.total;\n\t                progressPercent = Math.round(100 * bytesSent / bytesTotal);\n\t                dfd.notify(progressEvent, progressPercent, bytesSent, bytesTotal);\n\t\n\t                if (eventType === 'progress') {\n\t                    this.notifier.notify('uploadProgressInfo', [progressPercent, bytesSent, bytesTotal], request, xhr);\n\t                }\n\t            }\n\t            if (eventType === 'abort' || eventType === 'timeout' || eventType === 'error') {\n\t                this.notifier.notify('uploadError', [eventType, progressPercent], request, xhr);\n\t                dfd.reject(request, xhr, { event: progressEvent, percent: progressPercent });\n\t            }\n\t        }.bind(this);\n\t    }\n\t\n\t    function getResponseHeader(xhr, name) {\n\t        if (!xhr || !xhr.getResponseHeader) {\n\t            return '';\n\t        }\n\t\n\t        return xhr.getResponseHeader(name);\n\t    }\n\t\n\t    function getAllResponseHeaders(xhr) {\n\t        if (!xhr || !xhr.getAllResponseHeaders) {\n\t            return '';\n\t        }\n\t\n\t        return xhr.getAllResponseHeaders();\n\t    }\n\t\n\t    function extractHeaders(xhr) {\n\t        var headers = {}, headerValue;\n\t\n\t        this.settings.extractHeaders.forEach(function(headerName) {\n\t            headerValue = headerName === 'Link' ?\n\t                extractLinkHeaders.call(this, xhr) : getResponseHeader(xhr, headerName);\n\t\n\t            if (headerValue) {\n\t                headers[headerName] = headerValue;\n\t            }\n\t        });\n\t\n\t        return headers;\n\t    }\n\t\n\t    function extractLinkHeaders(xhr) {\n\t\n\t        // Safe way to get multiple headers of same type in IE\n\t        var headerName = 'Link';\n\t        var links = getAllResponseHeaders(xhr).split('\\n')\n\t            .filter(function(row) {\n\t                return row.match(new RegExp('^' + headerName + ':.*'));\n\t            })\n\t            .map(function(row) {\n\t                return row.trim().substr(headerName.length + 1);\n\t            })\n\t            .join(',');\n\t\n\t        if (!links) {\n\t            return false;\n\t        }\n\t        // Tidy into nice object like {next: 'http://example.com/?p=1'}\n\t        var tokens, url, rel, linksArray = links.split(','), value = {};\n\t        for (var i = 0, l = linksArray.length; i < l; i++) {\n\t            tokens = linksArray[i].split(';');\n\t            url = tokens[0].replace(/[<>]/g, '').trim();\n\t            rel = tokens[1].trim().split('=')[1].replace(/\"/g, '');\n\t            value[rel] = url;\n\t        }\n\t\n\t        return value;\n\t    }\n\t\n\t    Request.prototype = {\n\t        send: send\n\t    };\n\t\n\t    return { create: create };\n\t\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Annotations API\n\t     *\n\t     * @namespace\n\t     * @name api.annotations\n\t     */\n\t    return function annotations() {\n\t\n\t    \tvar dataHeaders = {\n\t\t\t\tannotation: { 'Content-Type': 'application/vnd.mendeley-annotation.1+json' }\n\t\t\t};\n\t\n\t        return {\n\t\n\t            /**\n\t             * Retrieve an annotation\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @param {string} id - A annotation UUID\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/annotations/{id}', ['id']),\n\t\n\t\t\t\t/**\n\t             * Patch a single annotation\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @param {String} id - Annotation UUID\n\t             * @param {object} text - The updated note text\n\t             * @returns {Promise}\n\t             */\n\t            patch: utils.requestWithDataFun('PATCH', '/annotations/{id}', ['id'], dataHeaders.annotation, true),\n\t\n\t            /**\n\t             * Create a single annotation\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @param {object} text - Note text\n\t             * @returns {Promise}\n\t             */\n\t            create: utils.requestWithDataFun('POST', '/annotations/', [], dataHeaders.annotation, true),\n\t\n\t             /**\n\t             * Delete a single annotation\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @param {String} id - Annotation UUID\n\t             * @returns {Promise}\n\t             */\n\t            delete: utils.requestFun('DELETE', '/annotations/{id}', ['id']),\n\t\n\t            /**\n\t             * Get a list of annotations\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @returns {promise}\n\t             */\n\t            list: utils.requestFun('GET', '/annotations/'),\n\t\n\t            /**\n\t             * The total number of annotations - set after the first call to annotations.list()\n\t             *\n\t             * @var\n\t             * @memberof api.annotations\n\t             * @type {integer}\n\t             */\n\t            count: 0,\n\t\n\t            /**\n\t             * Get the next page of annotations\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @returns {promise}\n\t             */\n\t            nextPage: utils.requestPageFun('next'),\n\t\n\t            /**\n\t             * Get the previous page of annotations\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @returns {promise}\n\t             */\n\t            previousPage: utils.requestPageFun('previous'),\n\t\n\t            /**\n\t             * Get the last page of annotations\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @returns {promise}\n\t             */\n\t            lastPage: utils.requestPageFun('last'),\n\t\n\t            /**\n\t             * Get pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             * @returns {object}\n\t             */\n\t            paginationLinks: {\n\t                last: false,\n\t                next: false,\n\t                previous: false\n\t            },\n\t\n\t            /**\n\t             * Reset all pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.annotations\n\t             */\n\t            resetPagination: utils.resetPaginationLinks\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Catalog API\n\t     *\n\t     * @namespace\n\t     * @name api.catalog\n\t     */\n\t    return function catalog() {\n\t        return {\n\t\n\t            /**\n\t             * Search the catalog\n\t             *\n\t             * @method\n\t             * @memberof api.catalog\n\t             * @param {object} params - A catalog search filter\n\t             * @returns {promise}\n\t             */\n\t            search: utils.requestFun('GET', '/catalog'),\n\t\n\t            /**\n\t             * Retrieve a document data from catalog\n\t             *\n\t             * @method\n\t             * @memberof api.catalog\n\t             * @param {string} id - A catalog UUID\n\t             * @param {object} params - A catalog search filter\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/catalog/{id}', ['id'])\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Documents API\n\t     *\n\t     * @namespace\n\t     * @name api.documents\n\t     */\n\t    return function documents() {\n\t        var dataHeaders = {\n\t                'Content-Type': 'application/vnd.mendeley-document.1+json'\n\t            },\n\t            cloneDataHeaders = {\n\t                'Content-Type': 'application/vnd.mendeley-document-clone.1+json'\n\t            },\n\t\n\t            listDocuments = utils.requestFun('GET', '/documents/'),\n\t            listFolder = utils.requestFun('GET', '/folders/{id}/documents', ['id']);\n\t\n\t        return {\n\t\n\t            /**\n\t             * Create a new document\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} data - The document data\n\t             * @returns {promise}\n\t             */\n\t            create: utils.requestWithDataFun('POST', '/documents', false, dataHeaders, true),\n\t\n\t            /**\n\t             * Create a new document from a file\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} file - A file object\n\t             * @returns {promise}\n\t             */\n\t            createFromFile: utils.requestWithFileFun('POST', '/documents'),\n\t\n\t            /**\n\t             * Create a new group document from a file\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} file - A file object\n\t             * @param {string} groupId - A group UUID\n\t             * @returns {promise}\n\t             */\n\t            createFromFileInGroup: utils.requestWithFileFun('POST', '/documents', 'group'),\n\t\n\t            /**\n\t             * Retrieve a document\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {string} id - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/documents/{id}', ['id']),\n\t\n\t            /**\n\t             * Update document\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} data - The new document data\n\t             * @returns {promise}\n\t             */\n\t            update: utils.requestWithDataFun('PATCH', '/documents/{id}', ['id'], dataHeaders, true),\n\t\n\t            /**\n\t             * Clone a document from user library to a group ( or vice versa )\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} id - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            clone: utils.requestWithDataFun('POST', '/documents/{id}/actions/cloneTo', ['id'], cloneDataHeaders, true),\n\t\n\t            /**\n\t             * List documents\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} params - Query paramaters\n\t             * @returns {promise}\n\t             */\n\t            list: function(params) {\n\t                if (!params || typeof params.folderId === 'undefined') {\n\t                    return listDocuments.call(this, params);\n\t                } else {\n\t                    var folderId = params.folderId,\n\t                        callParams = {\n\t                            limit: params.limit\n\t                        };\n\t                    delete params.folderId;\n\t                    return listFolder.call(this, folderId, callParams);\n\t                }\n\t            },\n\t\n\t            /**\n\t             * Search documents\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} params - Search paramaters\n\t             * @returns {promise}\n\t             */\n\t            search: utils.requestFun('GET', '/search/documents'),\n\t\n\t            /**\n\t             * Move a document to the trash\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @param {object} id - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            trash: utils.requestFun('POST', '/documents/{id}/trash', ['id'], dataHeaders),\n\t\n\t            /**\n\t             * The total number of documents - set after the first call to documents.list()\n\t             *\n\t             * @var\n\t             * @memberof api.documents\n\t             * @type {integer}\n\t             */\n\t            count: 0,\n\t\n\t            /**\n\t             * Get the next page of documents\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @returns {promise}\n\t             */\n\t            nextPage: utils.requestPageFun('next'),\n\t\n\t            /**\n\t             * Get the previous page of documents\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @returns {promise}\n\t             */\n\t            previousPage: utils.requestPageFun('previous'),\n\t\n\t            /**\n\t             * Get the last page of documents\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @returns {promise}\n\t             */\n\t            lastPage: utils.requestPageFun('last'),\n\t\n\t            /**\n\t             * Get pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             * @returns {object}\n\t             */\n\t            paginationLinks: {\n\t                last: false,\n\t                next: false,\n\t                previous: false\n\t            },\n\t\n\t            /**\n\t             * Reset all pagination\n\t             *\n\t             * @method\n\t             * @memberof api.documents\n\t             */\n\t            resetPagination: utils.resetPaginationLinks\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Files API\n\t     *\n\t     * @namespace\n\t     * @name api.files\n\t     */\n\t    return function files() {\n\t        var headers   = { 'Accept': 'application/vnd.mendeley-file.1+json' };\n\t\n\t        return {\n\t\n\t            /**\n\t             * Create a new file\n\t             *\n\t             * @method\n\t             * @memberof api.files\n\t             * @param {object} file - A file object\n\t             * @param {string} documentId - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            create: utils.requestWithFileFun('POST', '/files', 'document', headers),\n\t\n\t            /**\n\t             * Get a list of files for a document\n\t             *\n\t             * @method\n\t             * @memberof api.files\n\t             * @param {string} id - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            list: utils.requestFun('GET', '/files?document_id={id}', ['id'], headers),\n\t\n\t            /**\n\t             * Delete a file\n\t             *\n\t             * @method\n\t             * @memberof api.files\n\t             * @param {string} id - A file UUID\n\t             * @returns {promise}\n\t             */\n\t            remove: utils.requestFun('DELETE', '/files/{id}', ['id'])\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Folders API\n\t     *\n\t     * @namespace\n\t     * @name api.folders\n\t     */\n\t    return function folders() {\n\t        var dataHeaders = {\n\t                folder: { 'Content-Type': 'application/vnd.mendeley-folder.1+json' },\n\t                'document': { 'Content-Type': 'application/vnd.mendeley-document.1+json' }\n\t            };\n\t\n\t        return {\n\t\n\t            /**\n\t             * Create a new folder\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @param {object} data - The folder data\n\t             * @returns {promise}\n\t             */\n\t            create: utils.requestWithDataFun('POST', '/folders', [], dataHeaders.folder, true),\n\t\n\t            /**\n\t             * Retrieve a folder\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @param {string} id - A folder UUID\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/folders/{id}', ['id']),\n\t\n\t            /**\n\t             * Update a folder\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @param {object} data - The folder data\n\t             * @returns {promise}\n\t             */\n\t            update: utils.requestWithDataFun('PATCH', '/folders/{id}', ['id'], dataHeaders.folder, true),\n\t\n\t            /**\n\t             * Delete a folder\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @param {string} id - A folder UUID\n\t             * @returns {promise}\n\t             */\n\t            delete: utils.requestFun('DELETE', '/folders/{id}', ['id']),\n\t\n\t            /**\n\t             * Remove a document from a folder\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @param {string} id - A folder UUID\n\t             * @param {string} documentId - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            removeDocument: utils.requestFun('DELETE', '/folders/{id}/documents/{docId}', ['id', 'docId'], dataHeaders.folder),\n\t\n\t            /**\n\t             * Add a document to a folder\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @param {string} id - A folder UUID\n\t             * @param {string} documentId - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            addDocument: utils.requestWithDataFun('POST', '/folders/{id}/documents', ['id'], dataHeaders.document, false),\n\t\n\t            /**\n\t             * Get a list of folders\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @returns {promise}\n\t             */\n\t            list: utils.requestFun('GET', '/folders/'),\n\t\n\t            /**\n\t             * The total number of folders - set after the first call to folders.list()\n\t             *\n\t             * @var\n\t             * @memberof api.folders\n\t             * @type {integer}\n\t             */\n\t            count: 0,\n\t\n\t            /**\n\t             * Get the next page of folders\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @returns {promise}\n\t             */\n\t            nextPage: utils.requestPageFun('next'),\n\t\n\t            /**\n\t             * Get the previous page of folders\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @returns {promise}\n\t             */\n\t            previousPage: utils.requestPageFun('previous'),\n\t\n\t            /**\n\t             * Get the last page of folders\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @returns {promise}\n\t             */\n\t            lastPage: utils.requestPageFun('last'),\n\t\n\t            /**\n\t             * Get pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             * @returns {object}\n\t             */\n\t            paginationLinks: {\n\t                last: false,\n\t                next: false,\n\t                previous: false\n\t            },\n\t\n\t            /**\n\t             * Reset all pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.folders\n\t             */\n\t            resetPagination: utils.resetPaginationLinks\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Followers API\n\t     *\n\t     * @namespace\n\t     * @name api.followers\n\t     */\n\t    return function followers() {\n\t        var dataHeaders = {\n\t            'Content-Type': 'application/vnd.mendeley-follow-request.1+json'\n\t        };\n\t\n\t        return {\n\t\n\t            /**\n\t             * Get a list of followers.\n\t             *\n\t             * @method\n\t             * @memberof api.followers\n\t             * @param {object} params - {\n\t             *  follower: <profile_id>,\n\t             *  followed: <profile_id>,\n\t             *  status: <\"following\" or \"pending\">,\n\t             *  limit: <int>\n\t             * }\n\t             * @returns {promise}\n\t             */\n\t            list: utils.requestFun('GET', '/followers'),\n\t\n\t            /**\n\t             * Create a follower relationship.\n\t             *\n\t             * The follower id is inferred from whoever is logged in. The response\n\t             * is a relationship that includes the status which might be \"following\" or\n\t             * \"pending\" depending on the privacy settings of the profile being\n\t             * followed.\n\t             *\n\t             * @method\n\t             * @memberof api.followers\n\t             * @param {object} data - { followed: <profile id> }\n\t             * @returns {promise}\n\t             */\n\t            create: utils.requestWithDataFun('POST', '/followers', false, dataHeaders, false),\n\t\n\t            /**\n\t             * Delete a follower relationship.\n\t             *\n\t             * This requires a relationship id which can be retrieved via the list() method.\n\t             *\n\t             * @param {string} id - The relationship id\n\t             * @memberof api.followers\n\t             * @returns {promise}\n\t             */\n\t            remove: utils.requestFun('DELETE', '/followers/{id}', ['id'])\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Groups API\n\t     *\n\t     * @namespace\n\t     * @name api.groups\n\t     */\n\t    return function groups() {\n\t        return {\n\t\n\t            /**\n\t             * Retrieve a group\n\t             *\n\t             * @method\n\t             * @memberof api.groups\n\t             * @param {string} id - A group UUID\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/groups/{id}', ['id']),\n\t\n\t            /**\n\t             * Get a list of groups\n\t             *\n\t             * @method\n\t             * @memberof api.groups\n\t             * @returns {promise}\n\t             */\n\t            list: utils.requestFun('GET', '/groups/'),\n\t\n\t            /**\n\t             * The total number of groups - set after the first call to groups.list()\n\t             *\n\t             * @var\n\t             * @memberof api.groups\n\t             * @type {integer}\n\t             */\n\t            count: 0,\n\t\n\t            /**\n\t             * Get the next page of groups\n\t             *\n\t             * @method\n\t             * @memberof api.groups\n\t             * @returns {promise}\n\t             */\n\t            nextPage: utils.requestPageFun('next'),\n\t\n\t            /**\n\t             * Get the previous page of groups\n\t             *\n\t             * @method\n\t             * @memberof api.groups\n\t             * @returns {promise}\n\t             */\n\t            previousPage: utils.requestPageFun('previous'),\n\t\n\t            /**\n\t             * Get the last page of groups\n\t             *\n\t             * @method\n\t             * @memberof api.groups\n\t             * @returns {promise}\n\t             */\n\t            lastPage: utils.requestPageFun('last'),\n\t\n\t            /**\n\t             * Get pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.groups\n\t             * @returns {object}\n\t             */\n\t            paginationLinks: {\n\t                last: false,\n\t                next: false,\n\t                previous: false\n\t            },\n\t\n\t            /**\n\t             * Reset all pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.groups\n\t             */\n\t            resetPagination: utils.resetPaginationLinks\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Institutions API\n\t     *\n\t     * @namespace\n\t     * @name api.institutions\n\t     */\n\t    return function institutions() {\n\t        return {\n\t\n\t            /**\n\t             * Search for the institutions\n\t             *\n\t             * @method\n\t             * @memberof api.institutions\n\t             * @param {object} params - An institutions search filter\n\t             * @returns {promise}\n\t             */\n\t            search: utils.requestFun('GET', '/institutions'),\n\t\n\t            /**\n\t             * Retrieve an institution object\n\t             *\n\t             * @method\n\t             * @memberof api.institutions\n\t             * @param {string} id - An institution ID\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/institutions/{id}', ['id'])\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Locations API\n\t     *\n\t     * @namespace\n\t     * @name api.locations\n\t     */\n\t    return function locations() {\n\t        return {\n\t\n\t            /**\n\t             * Search for the locations\n\t             *\n\t             * @method\n\t             * @memberof api.locations\n\t             * @param {object} params - A locations search filter\n\t             * @returns {promise}\n\t             */\n\t            search: utils.requestFun('GET', '/locations'),\n\t\n\t            /**\n\t             * Retrieve a location object\n\t             *\n\t             * @method\n\t             * @memberof api.locations\n\t             * @param {string} id - A location ID\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/locations/{id}', ['id'])\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Metadata API\n\t     *\n\t     * @namespace\n\t     * @name api.metadata\n\t     */\n\t    return function metadata() {\n\t        var dataHeaders = {\n\t                'Accept': 'application/vnd.mendeley-document-lookup.1+json'\n\t            };\n\t\n\t        return {\n\t\n\t            /**\n\t             * Retrieve a document metadata\n\t             *\n\t             * @method\n\t             * @memberof api.metadata\n\t             * @param {object} params - A metadata search filter\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/metadata', false, dataHeaders, false)\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Profiles API\n\t     *\n\t     * @namespace\n\t     * @name api.profiles\n\t     */\n\t    return function profiles() {\n\t        var dataHeaders = {\n\t            'Content-Type': 'application/vnd.mendeley-profile-amendment.1+json'\n\t        };\n\t\n\t        return {\n\t\n\t            /**\n\t             * Retrieve the profile of the currently logged user\n\t             *\n\t             * @method\n\t             * @memberof api.profiles\n\t             * @returns {promise}\n\t             */\n\t            me: utils.requestFun('GET', '/profiles/me'),\n\t\n\t            /**\n\t             * Update profiles\n\t             *\n\t             * @method\n\t             * @memberof api.profiles\n\t             * @param {object} data - The new profiles data\n\t             * @returns {promise}\n\t             */\n\t            update: utils.requestWithDataFun('PATCH', '/profiles/me', [], dataHeaders, true)\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(utils) {\n\t\n\t    'use strict';\n\t\n\t    /**\n\t     * Trash API\n\t     *\n\t     * @namespace\n\t     * @name api.trash\n\t     */\n\t    return function trash() {\n\t        return {\n\t\n\t            /**\n\t             * Retrieve a document from the trash\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @param {string} id - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            retrieve: utils.requestFun('GET', '/trash/{id}', ['id']),\n\t\n\t            /**\n\t             * List all documents in the trash\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @returns {promise}\n\t             */\n\t            list: utils.requestFun('GET', '/trash/'),\n\t\n\t            /**\n\t             * Restore a trashed document\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @param {string} id - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            restore: utils.requestFun('POST', '/trash/{id}/restore', ['id']),\n\t\n\t            /**\n\t             * Permanently delete a trashed document\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @param {string} id - A document UUID\n\t             * @returns {promise}\n\t             */\n\t            destroy: utils.requestFun('DELETE', '/trash/{id}', ['id']),\n\t\n\t            /**\n\t             * The total number of trashed documents - set after the first call to trash.list()\n\t             *\n\t             * @var\n\t             * @memberof api.trash\n\t             * @type {integer}\n\t             */\n\t            count: 0,\n\t\n\t            /**\n\t             * Get the next page of trash\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @returns {promise}\n\t             */\n\t            nextPage: utils.requestPageFun('next'),\n\t\n\t            /**\n\t             * Get the previous page of trash\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @returns {promise}\n\t             */\n\t            previousPage: utils.requestPageFun('previous'),\n\t\n\t            /**\n\t             * Get the last page of trash\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @returns {promise}\n\t             */\n\t            lastPage: utils.requestPageFun('last'),\n\t\n\t\n\t            /**\n\t             * Get pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             * @returns {object}\n\t             */\n\t            paginationLinks: {\n\t                last: false,\n\t                next: false,\n\t                previous: false\n\t            },\n\t\n\t            /**\n\t             * Reset all pagination links\n\t             *\n\t             * @method\n\t             * @memberof api.trash\n\t             */\n\t            resetPagination: utils.resetPaginationLinks\n\t\n\t        };\n\t    };\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\n\t    'use strict';\n\t\n\t    var defaults = {\n\t        win: window,\n\t        authenticateOnStart: true,\n\t        apiAuthenticateUrl: 'https://api.mendeley.com/oauth/authorize',\n\t        accessTokenCookieName: 'accessToken',\n\t        scope: 'all'\n\t    };\n\t\n\t    var defaultsImplicitFlow = {\n\t        clientId: false,\n\t        redirectUrl: false\n\t    };\n\t\n\t    var defaultsAuthCodeFlow = {\n\t        apiAuthenticateUrl: '/login',\n\t        refreshAccessTokenUrl: false\n\t    };\n\t\n\t    var settings = {};\n\t\n\t    return {\n\t        implicitGrantFlow: implicitGrantFlow,\n\t        authCodeFlow: authCodeFlow\n\t    };\n\t\n\t    function implicitGrantFlow(options) {\n\t\n\t        settings = $.extend({}, defaults, defaultsImplicitFlow, options || {});\n\t\n\t        if (!settings.clientId) {\n\t            console.error('You must provide a clientId for implicit grant flow');\n\t            return false;\n\t        }\n\t\n\t        // OAuth redirect url defaults to current url\n\t        if (!settings.redirectUrl) {\n\t            var loc = settings.win.location;\n\t            settings.redirectUrl = loc.protocol + '//' + loc.host + loc.pathname;\n\t        }\n\t\n\t        settings.apiAuthenticateUrl = settings.apiAuthenticateUrl +\n\t            '?client_id=' + settings.clientId +\n\t            '&redirect_uri=' + settings.redirectUrl +\n\t            '&scope=' + settings.scope +\n\t            '&response_type=token';\n\t\n\t        if (settings.authenticateOnStart && !getAccessTokenCookieOrUrl()) {\n\t            authenticate();\n\t        }\n\t\n\t        return {\n\t            authenticate: authenticate,\n\t            getToken: getAccessTokenCookieOrUrl,\n\t            refreshToken: noop()\n\t        };\n\t    }\n\t\n\t    function authCodeFlow(options) {\n\t\n\t        settings = $.extend({}, defaults, defaultsAuthCodeFlow, options || {});\n\t\n\t        if (!settings.apiAuthenticateUrl) {\n\t            console.error('You must provide an apiAuthenticateUrl for auth code flow');\n\t            return false;\n\t        }\n\t\n\t        if (settings.authenticateOnStart && !getAccessTokenCookie()) {\n\t            authenticate();\n\t        }\n\t\n\t        return {\n\t            authenticate: authenticate,\n\t            getToken: getAccessTokenCookie,\n\t            refreshToken: refreshAccessTokenCookie\n\t        };\n\t    }\n\t\n\t    function noop() {\n\t        return function() { return false; };\n\t    }\n\t\n\t    function authenticate() {\n\t        var url = typeof settings.apiAuthenticateUrl === 'function' ?\n\t            settings.apiAuthenticateUrl() : settings.apiAuthenticateUrl;\n\t\n\t        clearAccessTokenCookie();\n\t        settings.win.location = url;\n\t    }\n\t\n\t    function getAccessTokenCookieOrUrl() {\n\t        var location = settings.win.location,\n\t            hash = location.hash ? location.hash.split('=')[1] : '',\n\t            cookie = getAccessTokenCookie();\n\t\n\t        if (hash && !cookie) {\n\t            setAccessTokenCookie(hash);\n\t            return hash;\n\t        }\n\t        if (!hash && cookie) {\n\t            return cookie;\n\t        }\n\t        if (hash && cookie) {\n\t            if (hash !== cookie) {\n\t                setAccessTokenCookie(hash);\n\t                return hash;\n\t            }\n\t            return cookie;\n\t        }\n\t\n\t        return '';\n\t    }\n\t\n\t    function getAccessTokenCookie() {\n\t        var name = settings.accessTokenCookieName + '=',\n\t            ca = settings.win.document.cookie.split(';');\n\t\n\t        for(var i = 0; i < ca.length; i++) {\n\t            var c = ca[i];\n\t\n\t            while (c.charAt(0) === ' ') {\n\t                c = c.substring(1);\n\t            }\n\t\n\t            if (c.indexOf(name) !== -1) {\n\t                return c.substring(name.length, c.length);\n\t            }\n\t        }\n\t\n\t        return '';\n\t    }\n\t\n\t    function setAccessTokenCookie(accessToken, expireHours) {\n\t        var d = new Date();\n\t        d.setTime(d.getTime() + ((expireHours || 1)*60*60*1000));\n\t        var expires = 'expires=' + d.toUTCString();\n\t        settings.win.document.cookie = settings.accessTokenCookieName + '=' + accessToken + '; ' + expires;\n\t    }\n\t\n\t    function clearAccessTokenCookie() {\n\t        setAccessTokenCookie('', -1);\n\t    }\n\t\n\t    function refreshAccessTokenCookie() {\n\t        if (settings.refreshAccessTokenUrl) {\n\t            return $.get(settings.refreshAccessTokenUrl);\n\t        }\n\t\n\t        return false;\n\t    }\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\n\t    'use strict';\n\t    var levelClass = {\n\t        debug: 0,\n\t        info: 1000,\n\t        warn: 2000,\n\t        error: 3000\n\t    };\n\t    var notifications = {\n\t        startInfo: {\n\t            code: 1001,\n\t            level: 'info',\n\t            message: 'Request Start : $0 $1'\n\t        },\n\t        redirectInfo: {\n\t            code: 1002,\n\t            level: 'info',\n\t            message: 'Redirection followed'\n\t        },\n\t        successInfo: {\n\t            code: 1003,\n\t            level: 'info',\n\t            message: 'Request Success'\n\t        },\n\t        uploadProgressInfo: {\n\t            code: 1004,\n\t            level: 'info',\n\t            message: 'Bytes $1 from $2 uploaded ($0%)'\n\t        },\n\t        uploadSuccessInfo: {\n\t            code: 1005,\n\t            level: 'info',\n\t            message: 'Upload Success'\n\t        },\n\t\n\t        commWarning: {\n\t            code: 2001,\n\t            level: 'warn',\n\t            message: 'Communication error (status code $0). Retrying ($1/$2).'\n\t        },\n\t        authWarning: {\n\t            code: 2002,\n\t            level: 'warn',\n\t            message: 'Authentication error (status code $0). Refreshing access token ($1/$2).'\n\t        },\n\t\n\t        reqError: {\n\t            code: 3001,\n\t            level: 'error',\n\t            message: 'Request error (status code $0).'\n\t        },\n\t        commError: {\n\t            code: 3002,\n\t            level: 'error',\n\t            message: 'Communication error (status code $0).  Maximun number of retries reached ($1).'\n\t        },\n\t        authError: {\n\t            code: 3003,\n\t            level: 'error',\n\t            message: 'Authentication error (status code $0).  Maximun number of retries reached ($1).'\n\t        },\n\t        refreshNotConfigured: {\n\t            code: 3004,\n\t            level: 'error',\n\t            message: 'Refresh token error. Refresh flow not configured.'\n\t        },\n\t        refreshError: {\n\t            code: 3005,\n\t            level: 'error',\n\t            message: 'Refresh token error. Request failed (status code $0).'\n\t        },\n\t        tokenError: {\n\t            code: 3006,\n\t            level: 'error',\n\t            message: 'Missing access token.'\n\t        },\n\t        parseError: {\n\t            code: 3007,\n\t            level: 'error',\n\t            message: 'JSON Parsing error.'\n\t        },\n\t        uploadError: {\n\t            code: 3008,\n\t            level: 'error',\n\t            message: 'Upload $0 ($1 %)'\n\t        }\n\t    };\n\t\n\t    function createMessage(notificationId, notificationData, request, response) {\n\t        var notification = $.extend({}, notifications[notificationId] || {});\n\t\n\t        if (notificationData) {\n\t            notification.message =  notification.message.replace(/\\$(\\d+)/g, function(m, key) {\n\t                return '' + (notificationData[+key] !== undefined ? notificationData[+key] : '');\n\t            });\n\t        }\n\t        if (request) {\n\t            notification.request = request;\n\t        }\n\t        if (response) {\n\t            notification.response = response;\n\t        }\n\t        return notification;\n\t    }\n\t\n\t    function createNotifier(logger, minLogLevel) {\n\t        if (!logger || typeof logger !== 'function') {\n\t            return false;\n\t        }\n\t        var minCode = levelClass[minLogLevel] || 0;\n\t\n\t        return {\n\t            notify: function notify(notificationId, notificationData, request, response) {\n\t                var notification = createMessage(notificationId, notificationData, request, response);\n\t                if(notification.code > minCode) {\n\t                    logger(notification);\n\t                }\n\t\n\t            }\n\t        };\n\t    }\n\t\n\t    return {\n\t        createNotifier: createNotifier\n\t        };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** standalone.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d4316842d9d34eec0fcc\n **/","// Exports Mendeley SDK\nmodule.exports = {\n    API: require('./api'),\n    Auth: require('./auth'),\n    Request: require('./request'),\n    Notifier: require('./notifier')\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/index.js\n ** module id = 0\n ** module chunks = 0\n **/","define(function(require) {\n    'use strict';\n\n    var utils = require('./utilities');\n\n    /**\n     * API\n     *\n     * @namespace\n     * @name api\n     */\n    return {\n        setAuthFlow: utils.setAuthFlow,\n        setBaseUrl:  utils.setBaseUrl,\n        setNotifier: utils.setNotifier,\n\n        annotations: require('./api/annotations')(),\n        catalog: require('./api/catalog')(),\n        documents: require('./api/documents')(),\n        files: require('./api/files')(),\n        folders: require('./api/folders')(),\n        followers: require('./api/followers')(),\n        groups: require('./api/groups')(),\n        institutions: require('./api/institutions')(),\n        locations: require('./api/locations')(),\n        metadata: require('./api/metadata')(),\n        profiles: require('./api/profiles')(),\n        trash: require('./api/trash')()\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api.js\n ** module id = 1\n ** module chunks = 0\n **/","define(['./request'], function(Request) {\n\n    'use strict';\n\n    var baseUrl = 'https://api.mendeley.com';\n    var authFlow = false;\n    var notifier = false;\n\n    /**\n     * Utilities\n     *\n     * @namespace\n     * @name utilities\n     */\n    return {\n        setAuthFlow: setAuthFlow,\n        setBaseUrl: setBaseUrl,\n        setNotifier: setNotifier,\n\n        requestFun: requestFun,\n        requestPageFun: requestPageFun,\n        requestWithDataFun: requestWithDataFun,\n        requestWithFileFun: requestWithFileFun,\n\n        resetPaginationLinks: resetPaginationLinks\n    };\n\n    function setAuthFlow(auth) {\n        authFlow = auth;\n    }\n\n    function setBaseUrl(url) {\n        baseUrl = url;\n    }\n\n    function setNotifier(newNotifier) {\n        notifier = newNotifier;\n    }\n\n    /**\n     * A general purpose request functions\n     *\n     * @private\n     * @param {string} method\n     * @param {string} uriTemplate\n     * @param {array} uriVars\n     * @param {array} headers\n     * @returns {function}\n     */\n    function requestFun(method, uriTemplate, uriVars, headers) {\n\n        uriVars = uriVars || [];\n\n        return function() {\n            var args = Array.prototype.slice.call(arguments, 0);\n            var url = getUrl(uriTemplate, uriVars, args);\n            var data = args[uriVars.length];\n            var request = {\n                type: method,\n                dataType: 'json',\n                url: url,\n                headers: getRequestHeaders(headers),\n                data: data\n            };\n            var settings = {\n                authFlow: authFlow\n            };\n\n            if (method === 'GET') {\n                settings.maxRetries = 1;\n            }\n\n            var promise = Request.create(request, settings, notifier).send();\n            promise.done(function(response, headers) {\n                setPaginationLinks.call(this, headers);\n            }.bind(this));\n\n            return promise;\n        };\n    }\n\n    /**\n     * Get a function for getting a pagination rel\n     *\n     * @private\n     * @param {string} rel - One of \"next\", \"prev\" or \"last\"\n     * @returns {function}\n     */\n    function requestPageFun(rel) {\n\n        return function() {\n            if (!this.paginationLinks[rel]) {\n                return new $.Deferred().reject();\n            }\n\n            var request = {\n                type: 'GET',\n                dataType: 'json',\n                url: this.paginationLinks[rel],\n                headers: getRequestHeaders({})\n            };\n\n            var settings = {\n                authFlow: authFlow,\n                maxRetries: 1\n            };\n\n            var promise = Request.create(request, settings, notifier).send();\n            promise.done(function(response, headers) {\n                setPaginationLinks.call(this, headers);\n            }.bind(this));\n\n            return promise;\n        };\n    }\n\n    /**\n     * Get a request function that sends data i.e. for POST, PUT, PATCH\n     * The data will be taken from the calling argument after any uriVar arguments.\n     *\n     * @private\n     * @param {string} method - The HTTP method\n     * @param {string} uriTemplate - A URI template e.g. /documents/{id}\n     * @param {array} uriVars - The variables for the URI template in the order\n     * they will be passed to the function e.g. ['id']\n     * @param {object} headers - Any additional headers to send\n     *  e.g. { 'Content-Type': 'application/vnd.mendeley-documents+1.json'}\n     * @param {bool} followLocation - follow the returned location header? Default is false\n     * @returns {function}\n     */\n    function requestWithDataFun(method, uriTemplate, uriVars, headers, followLocation) {\n        uriVars = uriVars || [];\n\n        return function() {\n            var args = Array.prototype.slice.call(arguments, 0);\n            var url = getUrl(uriTemplate, uriVars, args);\n            var data = args[uriVars.length];\n            var request = {\n                type: method,\n                url: url,\n                headers: getRequestHeaders(headers, data),\n                data: JSON.stringify(data),\n                processData: false\n            };\n\n            var settings = {\n                authFlow: authFlow,\n                followLocation: followLocation\n            };\n\n            return Request.create(request, settings, notifier).send();\n        };\n    }\n\n    /**\n     * Get a request function that sends a file\n     *\n     * @private\n     * @param {string} method\n     * @param {string} uriTemplate\n     * @param {string} linkType - Type of the element to link this file to\n     * @param {object} headers - Any additional headers to send\n     * @returns {function}\n     */\n    function requestWithFileFun(method, uriTemplate, linkType, headers) {\n\n        return function() {\n\n            var args = Array.prototype.slice.call(arguments, 0);\n            var url = getUrl(uriTemplate, [], args);\n            var file = args[0];\n            var linkId = args[1];\n            var requestHeaders = $.extend(true, {}, headers, getRequestHeaders(uploadHeaders(file, linkId, linkType), method));\n            var request = {\n                type: method,\n                url: url,\n                headers: requestHeaders,\n                data: file,\n                processData: false\n            };\n\n            var settings = {\n                authFlow: authFlow,\n                fileUpload: true\n            };\n\n            return Request.create(request, settings, notifier).send();\n        };\n    }\n\n    /**\n     * Provide the correct encoding for UTF-8 Content-Disposition header value.\n     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n     *\n     * @private\n     * @param {string} str\n     * @returns {string}\n     */\n    function encodeRFC5987ValueChars(str) {\n        return encodeURIComponent(str).\n            replace(/'/g, '%27').\n            replace(/\\(/g, '%28').\n            replace(/\\)/g, '%29').\n            replace(/\\*/g, '%2A');\n    }\n\n    /**\n     * Get headers for an upload\n     *\n     * @private\n     * @param {object} file\n     * @param {string} documentId\n     * @returns {string}\n     */\n    function uploadHeaders(file, linkId, linkType) {\n        var headers = {\n            'Content-Type': !!file.type ? file.type : 'application/octet-stream',\n            'Content-Disposition': 'attachment; filename*=UTF-8\\'\\'' + encodeRFC5987ValueChars(file.name)\n        };\n        if (linkType && linkId) {\n            switch(linkType) {\n                case 'group':\n                    headers.Link = '<' + baseUrl + '/groups/' + linkId +'>; rel=\"group\"';\n                    break;\n                case 'document':\n                    headers.Link = '<' + baseUrl + '/documents/' + linkId +'>; rel=\"document\"';\n                    break;\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Generate a URL from a template with properties and values\n     *\n     * @private\n     * @param {string} uriTemplate\n     * @param {array} uriProps\n     * @param {array} uriValues\n     * @returns {string}\n     */\n    function getUrl(uriTemplate, uriProps, uriValues) {\n        if (!uriProps.length) {\n            return baseUrl + uriTemplate;\n        }\n        var uriParams = {};\n        uriProps.forEach(function(prop, i) {\n            uriParams[prop] = uriValues[i];\n        });\n\n        return baseUrl + expandUriTemplate(uriTemplate, uriParams);\n    }\n\n    /**\n     * Get the headers for a request\n     *\n     * @private\n     * @param {array} headers\n     * @param {array} data\n     * @returns {array}\n     */\n    function getRequestHeaders(headers, data) {\n        for (var headerName in headers) {\n            var val = headers[headerName];\n            if (typeof val === 'function') {\n                headers[headerName] = val(data);\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Populate a URI template with data\n     *\n     * @private\n     * @param {string} template\n     * @param {object} data\n     * @returns {string}\n     */\n    function expandUriTemplate(template, data) {\n        var matches = template.match(/\\{[a-z]+\\}/gi);\n        matches.forEach(function(match) {\n            var prop = match.replace(/[\\{\\}]/g, '');\n            if (!data.hasOwnProperty(prop)) {\n                throw new Error('Endpoint requires ' + prop);\n            }\n            template = template.replace(match, data[prop]);\n        });\n\n        return template;\n    }\n\n    /**\n     * Set the current pagination links for a given API by extracting\n     * looking at the headers retruend with the response.\n     *\n     * @private\n     * @param {object} headers\n     */\n    function setPaginationLinks(headers) {\n        if (headers.hasOwnProperty('Mendeley-Count')) {\n            this.count = parseInt(headers['Mendeley-Count'], 10);\n        }\n\n        if (!headers.hasOwnProperty('Link') || typeof headers.Link !== 'object') {\n            return ;\n        }\n\n        for (var p in this.paginationLinks) {\n            this.paginationLinks[p] = headers.Link.hasOwnProperty(p) ? headers.Link[p] : false;\n        }\n    }\n\n    /**\n     * Reset the pagination links\n     *\n     * @private\n     */\n    function resetPaginationLinks() {\n        this.paginationLinks = {\n            last: false,\n            next: false,\n            previous: false\n        };\n        this.count = 0;\n    }\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/utilities.js\n ** module id = 2\n ** module chunks = 0\n **/","define(function() {\n\n    'use strict';\n\n    var defaults = {\n        authFlow: false,\n        maxRetries: 0,\n        maxAuthRetries: 1,\n        followLocation: false,\n        fileUpload: false,\n        extractHeaders: ['Mendeley-Count', 'Link']\n    };\n    var noopNotifier = { notify: function() {}};\n\n    function create(request, settings, notifier) {\n        return new Request(request, $.extend({}, defaults, settings), notifier);\n    }\n\n    function Request(request, settings, notifier) {\n        if (!settings.authFlow) {\n            throw new Error('Please provide an authentication interface');\n        }\n        this.request = request;\n        this.settings = settings;\n        this.retries = 0;\n        this.authRetries = 0;\n        this.notifier = notifier || noopNotifier;\n\n        this.notifier.notify('startInfo', [this.request.type, this.request.url], this.request);\n    }\n\n    function send(dfd, request) {\n\n        dfd = dfd || $.Deferred();\n        request = request || this.request;\n        request.headers = request.headers || {};\n        var token = this.settings.authFlow.getToken();\n        // If no token at all (cookie deleted or expired) refresh token if possible or authenticate\n        // because if you send 'Bearer ' you get a 400 rather than a 401 - is that a bug in the api?\n        if (!token) {\n            this.authRetries++;\n            this.notifier.notify('authWarning', ['n.a.', this.authRetries, this.settings.maxAuthRetries], this.request);\n            refreshToken.call(this, dfd);\n            return dfd.promise();\n        }\n\n        request.headers.Authorization = 'Bearer ' + token;\n\n        if (this.settings.fileUpload) {\n            // Undocumented way to access XHR so we can add upload progress listeners\n            var xhr = $.ajaxSettings.xhr();\n            request.xhr = function() { return xhr; };\n\n            // The response may have JSON Content-Type which makes jQuery invoke JSON.parse\n            // on the reponse, but there isn't one so there's an error which causes the deferred\n            // to be rejected. Specifying a dataType of 'text' prevents this.\n            request.dataType = 'text';\n\n            // Decorate the xhr with upload progress events\n            ['loadstart', 'loadend', 'load', 'progress', 'abort', 'error', 'timeout']\n                .forEach(function(uploadEvent) {\n                    xhr.upload.addEventListener(uploadEvent, uploadProgressFun.call(this, dfd, request, xhr));\n                }.bind(this));\n        }\n\n        $.ajax(request)\n            .fail(onFail.bind(this, dfd))\n            .done(onDone.bind(this, dfd));\n\n        return dfd.promise();\n    }\n\n    function onFail(dfd, xhr) {\n        switch (xhr.status) {\n            case 0:\n            case 504:\n                // 504 Gateway timeout or communication error\n                if (this.retries < this.settings.maxRetries) {\n                    this.retries++;\n                    this.notifier.notify('commWarning', [xhr.status, this.retries, this.settings.maxRetries], this.request, xhr);\n                    this.send(dfd);\n                } else {\n                    this.notifier.notify('commError', [xhr.status, this.settings.maxRetries], this.request, xhr);\n                    dfd.reject(this.request, xhr);\n                }\n                break;\n\n            case 401:\n                // 401 Unauthorized\n                if (this.authRetries < this.settings.maxAuthRetries) {\n                    this.authRetries++;\n                    this.notifier.notify('authWarning', [xhr.status, this.authRetries, this.settings.maxAuthRetries], this.request, xhr);\n                    refreshToken.call(this, dfd, xhr);\n                } else {\n                    this.notifier.notify('authError', [xhr.status, this.settings.maxAuthRetries], this.request, xhr);\n                    dfd.reject(this.request, xhr);\n                    this.settings.authFlow.authenticate(200);\n                }\n                break;\n\n            default:\n                this.notifier.notify('reqError', [xhr.status], this.request, xhr);\n                dfd.reject(this.request, xhr);\n        }\n    }\n\n    function onDone(dfd, response, success, xhr) {\n\n        var locationHeader = getResponseHeader(xhr, 'Location'),\n            headers;\n\n        if (locationHeader && this.settings.followLocation && xhr.status === 201) {\n            var redirect = {\n                type: 'GET',\n                url: locationHeader,\n                dataType: 'json'\n            };\n            this.notifier.notify('redirectInfo', null, this.request, redirect);\n            this.send(dfd, redirect);\n        } else {\n            if (this.settings.extractHeaders) {\n                headers = extractHeaders.call(this, xhr);\n            }\n\n            // File uploads have type set to text, so if there is some JSON parse it manually\n            if (this.settings.fileUpload) {\n                if (response) {\n                    try {\n                        response = JSON.parse(response);\n                    } catch (error) {\n                        this.notifier.notify('parseError', null, this.request, xhr);\n                        dfd.reject(error);\n                        return;\n                    }\n                }\n                this.notifier.notify('uploadSuccessInfo', null, this.request, response);\n                dfd.resolve(response, xhr);\n            } else {\n                this.notifier.notify('successInfo', null, this.request, response);\n                dfd.resolve(response, headers);\n            }\n        }\n    }\n\n    function refreshToken(dfd, xhr) {\n        var refresh = this.settings.authFlow.refreshToken();\n        if (refresh) {\n            $.when(refresh)\n                // If OK update the access token and re-send the request\n                .done(function() {\n                    this.send(dfd);\n                }.bind(this))\n                // If fails then we need to re-authenticate\n                .fail(function(refreshxhr) {\n                    this.notifier.notify('refreshError', [refreshxhr.status], this.request, refreshxhr);\n                    dfd.reject(this.request, xhr);\n                    this.settings.authFlow.authenticate(200);\n                }.bind(this));\n        } else {\n            this.notifier.notify('refreshNotConfigured', []);\n            dfd.reject(this.request, xhr);\n            this.settings.authFlow.authenticate(200);\n        }\n    }\n\n    /**\n     * Get a function to monitor upload progress and emit notify events\n     * on a deferred.\n     *\n     * @private\n     * @param {object} dfd - Deferred\n     * @param {object} request - The original request\n     * @param {object} xhr The original XHR\n     */\n    function uploadProgressFun(dfd, request, xhr) {\n        var progressPercent;\n        var bytesTotal;\n        var bytesSent;\n\n        return function(progressEvent) {\n            var eventType = progressEvent.type;\n\n            if (progressEvent.lengthComputable) {\n                bytesSent = progressEvent.loaded || progressEvent.position; // position is deprecated\n                bytesTotal = progressEvent.total;\n                progressPercent = Math.round(100 * bytesSent / bytesTotal);\n                dfd.notify(progressEvent, progressPercent, bytesSent, bytesTotal);\n\n                if (eventType === 'progress') {\n                    this.notifier.notify('uploadProgressInfo', [progressPercent, bytesSent, bytesTotal], request, xhr);\n                }\n            }\n            if (eventType === 'abort' || eventType === 'timeout' || eventType === 'error') {\n                this.notifier.notify('uploadError', [eventType, progressPercent], request, xhr);\n                dfd.reject(request, xhr, { event: progressEvent, percent: progressPercent });\n            }\n        }.bind(this);\n    }\n\n    function getResponseHeader(xhr, name) {\n        if (!xhr || !xhr.getResponseHeader) {\n            return '';\n        }\n\n        return xhr.getResponseHeader(name);\n    }\n\n    function getAllResponseHeaders(xhr) {\n        if (!xhr || !xhr.getAllResponseHeaders) {\n            return '';\n        }\n\n        return xhr.getAllResponseHeaders();\n    }\n\n    function extractHeaders(xhr) {\n        var headers = {}, headerValue;\n\n        this.settings.extractHeaders.forEach(function(headerName) {\n            headerValue = headerName === 'Link' ?\n                extractLinkHeaders.call(this, xhr) : getResponseHeader(xhr, headerName);\n\n            if (headerValue) {\n                headers[headerName] = headerValue;\n            }\n        });\n\n        return headers;\n    }\n\n    function extractLinkHeaders(xhr) {\n\n        // Safe way to get multiple headers of same type in IE\n        var headerName = 'Link';\n        var links = getAllResponseHeaders(xhr).split('\\n')\n            .filter(function(row) {\n                return row.match(new RegExp('^' + headerName + ':.*'));\n            })\n            .map(function(row) {\n                return row.trim().substr(headerName.length + 1);\n            })\n            .join(',');\n\n        if (!links) {\n            return false;\n        }\n        // Tidy into nice object like {next: 'http://example.com/?p=1'}\n        var tokens, url, rel, linksArray = links.split(','), value = {};\n        for (var i = 0, l = linksArray.length; i < l; i++) {\n            tokens = linksArray[i].split(';');\n            url = tokens[0].replace(/[<>]/g, '').trim();\n            rel = tokens[1].trim().split('=')[1].replace(/\"/g, '');\n            value[rel] = url;\n        }\n\n        return value;\n    }\n\n    Request.prototype = {\n        send: send\n    };\n\n    return { create: create };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/request.js\n ** module id = 3\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Annotations API\n     *\n     * @namespace\n     * @name api.annotations\n     */\n    return function annotations() {\n\n    \tvar dataHeaders = {\n\t\t\tannotation: { 'Content-Type': 'application/vnd.mendeley-annotation.1+json' }\n\t\t};\n\n        return {\n\n            /**\n             * Retrieve an annotation\n             *\n             * @method\n             * @memberof api.annotations\n             * @param {string} id - A annotation UUID\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/annotations/{id}', ['id']),\n\n\t\t\t/**\n             * Patch a single annotation\n             *\n             * @method\n             * @memberof api.annotations\n             * @param {String} id - Annotation UUID\n             * @param {object} text - The updated note text\n             * @returns {Promise}\n             */\n            patch: utils.requestWithDataFun('PATCH', '/annotations/{id}', ['id'], dataHeaders.annotation, true),\n\n            /**\n             * Create a single annotation\n             *\n             * @method\n             * @memberof api.annotations\n             * @param {object} text - Note text\n             * @returns {Promise}\n             */\n            create: utils.requestWithDataFun('POST', '/annotations/', [], dataHeaders.annotation, true),\n\n             /**\n             * Delete a single annotation\n             *\n             * @method\n             * @memberof api.annotations\n             * @param {String} id - Annotation UUID\n             * @returns {Promise}\n             */\n            delete: utils.requestFun('DELETE', '/annotations/{id}', ['id']),\n\n            /**\n             * Get a list of annotations\n             *\n             * @method\n             * @memberof api.annotations\n             * @returns {promise}\n             */\n            list: utils.requestFun('GET', '/annotations/'),\n\n            /**\n             * The total number of annotations - set after the first call to annotations.list()\n             *\n             * @var\n             * @memberof api.annotations\n             * @type {integer}\n             */\n            count: 0,\n\n            /**\n             * Get the next page of annotations\n             *\n             * @method\n             * @memberof api.annotations\n             * @returns {promise}\n             */\n            nextPage: utils.requestPageFun('next'),\n\n            /**\n             * Get the previous page of annotations\n             *\n             * @method\n             * @memberof api.annotations\n             * @returns {promise}\n             */\n            previousPage: utils.requestPageFun('previous'),\n\n            /**\n             * Get the last page of annotations\n             *\n             * @method\n             * @memberof api.annotations\n             * @returns {promise}\n             */\n            lastPage: utils.requestPageFun('last'),\n\n            /**\n             * Get pagination links\n             *\n             * @method\n             * @memberof api.annotations\n             * @returns {object}\n             */\n            paginationLinks: {\n                last: false,\n                next: false,\n                previous: false\n            },\n\n            /**\n             * Reset all pagination links\n             *\n             * @method\n             * @memberof api.annotations\n             */\n            resetPagination: utils.resetPaginationLinks\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/annotations.js\n ** module id = 4\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Catalog API\n     *\n     * @namespace\n     * @name api.catalog\n     */\n    return function catalog() {\n        return {\n\n            /**\n             * Search the catalog\n             *\n             * @method\n             * @memberof api.catalog\n             * @param {object} params - A catalog search filter\n             * @returns {promise}\n             */\n            search: utils.requestFun('GET', '/catalog'),\n\n            /**\n             * Retrieve a document data from catalog\n             *\n             * @method\n             * @memberof api.catalog\n             * @param {string} id - A catalog UUID\n             * @param {object} params - A catalog search filter\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/catalog/{id}', ['id'])\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/catalog.js\n ** module id = 5\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Documents API\n     *\n     * @namespace\n     * @name api.documents\n     */\n    return function documents() {\n        var dataHeaders = {\n                'Content-Type': 'application/vnd.mendeley-document.1+json'\n            },\n            cloneDataHeaders = {\n                'Content-Type': 'application/vnd.mendeley-document-clone.1+json'\n            },\n\n            listDocuments = utils.requestFun('GET', '/documents/'),\n            listFolder = utils.requestFun('GET', '/folders/{id}/documents', ['id']);\n\n        return {\n\n            /**\n             * Create a new document\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} data - The document data\n             * @returns {promise}\n             */\n            create: utils.requestWithDataFun('POST', '/documents', false, dataHeaders, true),\n\n            /**\n             * Create a new document from a file\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} file - A file object\n             * @returns {promise}\n             */\n            createFromFile: utils.requestWithFileFun('POST', '/documents'),\n\n            /**\n             * Create a new group document from a file\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} file - A file object\n             * @param {string} groupId - A group UUID\n             * @returns {promise}\n             */\n            createFromFileInGroup: utils.requestWithFileFun('POST', '/documents', 'group'),\n\n            /**\n             * Retrieve a document\n             *\n             * @method\n             * @memberof api.documents\n             * @param {string} id - A document UUID\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/documents/{id}', ['id']),\n\n            /**\n             * Update document\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} data - The new document data\n             * @returns {promise}\n             */\n            update: utils.requestWithDataFun('PATCH', '/documents/{id}', ['id'], dataHeaders, true),\n\n            /**\n             * Clone a document from user library to a group ( or vice versa )\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} id - A document UUID\n             * @returns {promise}\n             */\n            clone: utils.requestWithDataFun('POST', '/documents/{id}/actions/cloneTo', ['id'], cloneDataHeaders, true),\n\n            /**\n             * List documents\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} params - Query paramaters\n             * @returns {promise}\n             */\n            list: function(params) {\n                if (!params || typeof params.folderId === 'undefined') {\n                    return listDocuments.call(this, params);\n                } else {\n                    var folderId = params.folderId,\n                        callParams = {\n                            limit: params.limit\n                        };\n                    delete params.folderId;\n                    return listFolder.call(this, folderId, callParams);\n                }\n            },\n\n            /**\n             * Search documents\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} params - Search paramaters\n             * @returns {promise}\n             */\n            search: utils.requestFun('GET', '/search/documents'),\n\n            /**\n             * Move a document to the trash\n             *\n             * @method\n             * @memberof api.documents\n             * @param {object} id - A document UUID\n             * @returns {promise}\n             */\n            trash: utils.requestFun('POST', '/documents/{id}/trash', ['id'], dataHeaders),\n\n            /**\n             * The total number of documents - set after the first call to documents.list()\n             *\n             * @var\n             * @memberof api.documents\n             * @type {integer}\n             */\n            count: 0,\n\n            /**\n             * Get the next page of documents\n             *\n             * @method\n             * @memberof api.documents\n             * @returns {promise}\n             */\n            nextPage: utils.requestPageFun('next'),\n\n            /**\n             * Get the previous page of documents\n             *\n             * @method\n             * @memberof api.documents\n             * @returns {promise}\n             */\n            previousPage: utils.requestPageFun('previous'),\n\n            /**\n             * Get the last page of documents\n             *\n             * @method\n             * @memberof api.documents\n             * @returns {promise}\n             */\n            lastPage: utils.requestPageFun('last'),\n\n            /**\n             * Get pagination links\n             *\n             * @method\n             * @memberof api.documents\n             * @returns {object}\n             */\n            paginationLinks: {\n                last: false,\n                next: false,\n                previous: false\n            },\n\n            /**\n             * Reset all pagination\n             *\n             * @method\n             * @memberof api.documents\n             */\n            resetPagination: utils.resetPaginationLinks\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/documents.js\n ** module id = 6\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Files API\n     *\n     * @namespace\n     * @name api.files\n     */\n    return function files() {\n        var headers   = { 'Accept': 'application/vnd.mendeley-file.1+json' };\n\n        return {\n\n            /**\n             * Create a new file\n             *\n             * @method\n             * @memberof api.files\n             * @param {object} file - A file object\n             * @param {string} documentId - A document UUID\n             * @returns {promise}\n             */\n            create: utils.requestWithFileFun('POST', '/files', 'document', headers),\n\n            /**\n             * Get a list of files for a document\n             *\n             * @method\n             * @memberof api.files\n             * @param {string} id - A document UUID\n             * @returns {promise}\n             */\n            list: utils.requestFun('GET', '/files?document_id={id}', ['id'], headers),\n\n            /**\n             * Delete a file\n             *\n             * @method\n             * @memberof api.files\n             * @param {string} id - A file UUID\n             * @returns {promise}\n             */\n            remove: utils.requestFun('DELETE', '/files/{id}', ['id'])\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/files.js\n ** module id = 7\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Folders API\n     *\n     * @namespace\n     * @name api.folders\n     */\n    return function folders() {\n        var dataHeaders = {\n                folder: { 'Content-Type': 'application/vnd.mendeley-folder.1+json' },\n                'document': { 'Content-Type': 'application/vnd.mendeley-document.1+json' }\n            };\n\n        return {\n\n            /**\n             * Create a new folder\n             *\n             * @method\n             * @memberof api.folders\n             * @param {object} data - The folder data\n             * @returns {promise}\n             */\n            create: utils.requestWithDataFun('POST', '/folders', [], dataHeaders.folder, true),\n\n            /**\n             * Retrieve a folder\n             *\n             * @method\n             * @memberof api.folders\n             * @param {string} id - A folder UUID\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/folders/{id}', ['id']),\n\n            /**\n             * Update a folder\n             *\n             * @method\n             * @memberof api.folders\n             * @param {object} data - The folder data\n             * @returns {promise}\n             */\n            update: utils.requestWithDataFun('PATCH', '/folders/{id}', ['id'], dataHeaders.folder, true),\n\n            /**\n             * Delete a folder\n             *\n             * @method\n             * @memberof api.folders\n             * @param {string} id - A folder UUID\n             * @returns {promise}\n             */\n            delete: utils.requestFun('DELETE', '/folders/{id}', ['id']),\n\n            /**\n             * Remove a document from a folder\n             *\n             * @method\n             * @memberof api.folders\n             * @param {string} id - A folder UUID\n             * @param {string} documentId - A document UUID\n             * @returns {promise}\n             */\n            removeDocument: utils.requestFun('DELETE', '/folders/{id}/documents/{docId}', ['id', 'docId'], dataHeaders.folder),\n\n            /**\n             * Add a document to a folder\n             *\n             * @method\n             * @memberof api.folders\n             * @param {string} id - A folder UUID\n             * @param {string} documentId - A document UUID\n             * @returns {promise}\n             */\n            addDocument: utils.requestWithDataFun('POST', '/folders/{id}/documents', ['id'], dataHeaders.document, false),\n\n            /**\n             * Get a list of folders\n             *\n             * @method\n             * @memberof api.folders\n             * @returns {promise}\n             */\n            list: utils.requestFun('GET', '/folders/'),\n\n            /**\n             * The total number of folders - set after the first call to folders.list()\n             *\n             * @var\n             * @memberof api.folders\n             * @type {integer}\n             */\n            count: 0,\n\n            /**\n             * Get the next page of folders\n             *\n             * @method\n             * @memberof api.folders\n             * @returns {promise}\n             */\n            nextPage: utils.requestPageFun('next'),\n\n            /**\n             * Get the previous page of folders\n             *\n             * @method\n             * @memberof api.folders\n             * @returns {promise}\n             */\n            previousPage: utils.requestPageFun('previous'),\n\n            /**\n             * Get the last page of folders\n             *\n             * @method\n             * @memberof api.folders\n             * @returns {promise}\n             */\n            lastPage: utils.requestPageFun('last'),\n\n            /**\n             * Get pagination links\n             *\n             * @method\n             * @memberof api.folders\n             * @returns {object}\n             */\n            paginationLinks: {\n                last: false,\n                next: false,\n                previous: false\n            },\n\n            /**\n             * Reset all pagination links\n             *\n             * @method\n             * @memberof api.folders\n             */\n            resetPagination: utils.resetPaginationLinks\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/folders.js\n ** module id = 8\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Followers API\n     *\n     * @namespace\n     * @name api.followers\n     */\n    return function followers() {\n        var dataHeaders = {\n            'Content-Type': 'application/vnd.mendeley-follow-request.1+json'\n        };\n\n        return {\n\n            /**\n             * Get a list of followers.\n             *\n             * @method\n             * @memberof api.followers\n             * @param {object} params - {\n             *  follower: <profile_id>,\n             *  followed: <profile_id>,\n             *  status: <\"following\" or \"pending\">,\n             *  limit: <int>\n             * }\n             * @returns {promise}\n             */\n            list: utils.requestFun('GET', '/followers'),\n\n            /**\n             * Create a follower relationship.\n             *\n             * The follower id is inferred from whoever is logged in. The response\n             * is a relationship that includes the status which might be \"following\" or\n             * \"pending\" depending on the privacy settings of the profile being\n             * followed.\n             *\n             * @method\n             * @memberof api.followers\n             * @param {object} data - { followed: <profile id> }\n             * @returns {promise}\n             */\n            create: utils.requestWithDataFun('POST', '/followers', false, dataHeaders, false),\n\n            /**\n             * Delete a follower relationship.\n             *\n             * This requires a relationship id which can be retrieved via the list() method.\n             *\n             * @param {string} id - The relationship id\n             * @memberof api.followers\n             * @returns {promise}\n             */\n            remove: utils.requestFun('DELETE', '/followers/{id}', ['id'])\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/followers.js\n ** module id = 9\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Groups API\n     *\n     * @namespace\n     * @name api.groups\n     */\n    return function groups() {\n        return {\n\n            /**\n             * Retrieve a group\n             *\n             * @method\n             * @memberof api.groups\n             * @param {string} id - A group UUID\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/groups/{id}', ['id']),\n\n            /**\n             * Get a list of groups\n             *\n             * @method\n             * @memberof api.groups\n             * @returns {promise}\n             */\n            list: utils.requestFun('GET', '/groups/'),\n\n            /**\n             * The total number of groups - set after the first call to groups.list()\n             *\n             * @var\n             * @memberof api.groups\n             * @type {integer}\n             */\n            count: 0,\n\n            /**\n             * Get the next page of groups\n             *\n             * @method\n             * @memberof api.groups\n             * @returns {promise}\n             */\n            nextPage: utils.requestPageFun('next'),\n\n            /**\n             * Get the previous page of groups\n             *\n             * @method\n             * @memberof api.groups\n             * @returns {promise}\n             */\n            previousPage: utils.requestPageFun('previous'),\n\n            /**\n             * Get the last page of groups\n             *\n             * @method\n             * @memberof api.groups\n             * @returns {promise}\n             */\n            lastPage: utils.requestPageFun('last'),\n\n            /**\n             * Get pagination links\n             *\n             * @method\n             * @memberof api.groups\n             * @returns {object}\n             */\n            paginationLinks: {\n                last: false,\n                next: false,\n                previous: false\n            },\n\n            /**\n             * Reset all pagination links\n             *\n             * @method\n             * @memberof api.groups\n             */\n            resetPagination: utils.resetPaginationLinks\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/groups.js\n ** module id = 10\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Institutions API\n     *\n     * @namespace\n     * @name api.institutions\n     */\n    return function institutions() {\n        return {\n\n            /**\n             * Search for the institutions\n             *\n             * @method\n             * @memberof api.institutions\n             * @param {object} params - An institutions search filter\n             * @returns {promise}\n             */\n            search: utils.requestFun('GET', '/institutions'),\n\n            /**\n             * Retrieve an institution object\n             *\n             * @method\n             * @memberof api.institutions\n             * @param {string} id - An institution ID\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/institutions/{id}', ['id'])\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/institutions.js\n ** module id = 11\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Locations API\n     *\n     * @namespace\n     * @name api.locations\n     */\n    return function locations() {\n        return {\n\n            /**\n             * Search for the locations\n             *\n             * @method\n             * @memberof api.locations\n             * @param {object} params - A locations search filter\n             * @returns {promise}\n             */\n            search: utils.requestFun('GET', '/locations'),\n\n            /**\n             * Retrieve a location object\n             *\n             * @method\n             * @memberof api.locations\n             * @param {string} id - A location ID\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/locations/{id}', ['id'])\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/locations.js\n ** module id = 12\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Metadata API\n     *\n     * @namespace\n     * @name api.metadata\n     */\n    return function metadata() {\n        var dataHeaders = {\n                'Accept': 'application/vnd.mendeley-document-lookup.1+json'\n            };\n\n        return {\n\n            /**\n             * Retrieve a document metadata\n             *\n             * @method\n             * @memberof api.metadata\n             * @param {object} params - A metadata search filter\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/metadata', false, dataHeaders, false)\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/metadata.js\n ** module id = 13\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Profiles API\n     *\n     * @namespace\n     * @name api.profiles\n     */\n    return function profiles() {\n        var dataHeaders = {\n            'Content-Type': 'application/vnd.mendeley-profile-amendment.1+json'\n        };\n\n        return {\n\n            /**\n             * Retrieve the profile of the currently logged user\n             *\n             * @method\n             * @memberof api.profiles\n             * @returns {promise}\n             */\n            me: utils.requestFun('GET', '/profiles/me'),\n\n            /**\n             * Update profiles\n             *\n             * @method\n             * @memberof api.profiles\n             * @param {object} data - The new profiles data\n             * @returns {promise}\n             */\n            update: utils.requestWithDataFun('PATCH', '/profiles/me', [], dataHeaders, true)\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/profiles.js\n ** module id = 14\n ** module chunks = 0\n **/","define(['../utilities'], function(utils) {\n\n    'use strict';\n\n    /**\n     * Trash API\n     *\n     * @namespace\n     * @name api.trash\n     */\n    return function trash() {\n        return {\n\n            /**\n             * Retrieve a document from the trash\n             *\n             * @method\n             * @memberof api.trash\n             * @param {string} id - A document UUID\n             * @returns {promise}\n             */\n            retrieve: utils.requestFun('GET', '/trash/{id}', ['id']),\n\n            /**\n             * List all documents in the trash\n             *\n             * @method\n             * @memberof api.trash\n             * @returns {promise}\n             */\n            list: utils.requestFun('GET', '/trash/'),\n\n            /**\n             * Restore a trashed document\n             *\n             * @method\n             * @memberof api.trash\n             * @param {string} id - A document UUID\n             * @returns {promise}\n             */\n            restore: utils.requestFun('POST', '/trash/{id}/restore', ['id']),\n\n            /**\n             * Permanently delete a trashed document\n             *\n             * @method\n             * @memberof api.trash\n             * @param {string} id - A document UUID\n             * @returns {promise}\n             */\n            destroy: utils.requestFun('DELETE', '/trash/{id}', ['id']),\n\n            /**\n             * The total number of trashed documents - set after the first call to trash.list()\n             *\n             * @var\n             * @memberof api.trash\n             * @type {integer}\n             */\n            count: 0,\n\n            /**\n             * Get the next page of trash\n             *\n             * @method\n             * @memberof api.trash\n             * @returns {promise}\n             */\n            nextPage: utils.requestPageFun('next'),\n\n            /**\n             * Get the previous page of trash\n             *\n             * @method\n             * @memberof api.trash\n             * @returns {promise}\n             */\n            previousPage: utils.requestPageFun('previous'),\n\n            /**\n             * Get the last page of trash\n             *\n             * @method\n             * @memberof api.trash\n             * @returns {promise}\n             */\n            lastPage: utils.requestPageFun('last'),\n\n\n            /**\n             * Get pagination links\n             *\n             * @method\n             * @memberof api.trash\n             * @returns {object}\n             */\n            paginationLinks: {\n                last: false,\n                next: false,\n                previous: false\n            },\n\n            /**\n             * Reset all pagination links\n             *\n             * @method\n             * @memberof api.trash\n             */\n            resetPagination: utils.resetPaginationLinks\n\n        };\n    };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/api/trash.js\n ** module id = 15\n ** module chunks = 0\n **/","define(function() {\n\n    'use strict';\n\n    var defaults = {\n        win: window,\n        authenticateOnStart: true,\n        apiAuthenticateUrl: 'https://api.mendeley.com/oauth/authorize',\n        accessTokenCookieName: 'accessToken',\n        scope: 'all'\n    };\n\n    var defaultsImplicitFlow = {\n        clientId: false,\n        redirectUrl: false\n    };\n\n    var defaultsAuthCodeFlow = {\n        apiAuthenticateUrl: '/login',\n        refreshAccessTokenUrl: false\n    };\n\n    var settings = {};\n\n    return {\n        implicitGrantFlow: implicitGrantFlow,\n        authCodeFlow: authCodeFlow\n    };\n\n    function implicitGrantFlow(options) {\n\n        settings = $.extend({}, defaults, defaultsImplicitFlow, options || {});\n\n        if (!settings.clientId) {\n            console.error('You must provide a clientId for implicit grant flow');\n            return false;\n        }\n\n        // OAuth redirect url defaults to current url\n        if (!settings.redirectUrl) {\n            var loc = settings.win.location;\n            settings.redirectUrl = loc.protocol + '//' + loc.host + loc.pathname;\n        }\n\n        settings.apiAuthenticateUrl = settings.apiAuthenticateUrl +\n            '?client_id=' + settings.clientId +\n            '&redirect_uri=' + settings.redirectUrl +\n            '&scope=' + settings.scope +\n            '&response_type=token';\n\n        if (settings.authenticateOnStart && !getAccessTokenCookieOrUrl()) {\n            authenticate();\n        }\n\n        return {\n            authenticate: authenticate,\n            getToken: getAccessTokenCookieOrUrl,\n            refreshToken: noop()\n        };\n    }\n\n    function authCodeFlow(options) {\n\n        settings = $.extend({}, defaults, defaultsAuthCodeFlow, options || {});\n\n        if (!settings.apiAuthenticateUrl) {\n            console.error('You must provide an apiAuthenticateUrl for auth code flow');\n            return false;\n        }\n\n        if (settings.authenticateOnStart && !getAccessTokenCookie()) {\n            authenticate();\n        }\n\n        return {\n            authenticate: authenticate,\n            getToken: getAccessTokenCookie,\n            refreshToken: refreshAccessTokenCookie\n        };\n    }\n\n    function noop() {\n        return function() { return false; };\n    }\n\n    function authenticate() {\n        var url = typeof settings.apiAuthenticateUrl === 'function' ?\n            settings.apiAuthenticateUrl() : settings.apiAuthenticateUrl;\n\n        clearAccessTokenCookie();\n        settings.win.location = url;\n    }\n\n    function getAccessTokenCookieOrUrl() {\n        var location = settings.win.location,\n            hash = location.hash ? location.hash.split('=')[1] : '',\n            cookie = getAccessTokenCookie();\n\n        if (hash && !cookie) {\n            setAccessTokenCookie(hash);\n            return hash;\n        }\n        if (!hash && cookie) {\n            return cookie;\n        }\n        if (hash && cookie) {\n            if (hash !== cookie) {\n                setAccessTokenCookie(hash);\n                return hash;\n            }\n            return cookie;\n        }\n\n        return '';\n    }\n\n    function getAccessTokenCookie() {\n        var name = settings.accessTokenCookieName + '=',\n            ca = settings.win.document.cookie.split(';');\n\n        for(var i = 0; i < ca.length; i++) {\n            var c = ca[i];\n\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1);\n            }\n\n            if (c.indexOf(name) !== -1) {\n                return c.substring(name.length, c.length);\n            }\n        }\n\n        return '';\n    }\n\n    function setAccessTokenCookie(accessToken, expireHours) {\n        var d = new Date();\n        d.setTime(d.getTime() + ((expireHours || 1)*60*60*1000));\n        var expires = 'expires=' + d.toUTCString();\n        settings.win.document.cookie = settings.accessTokenCookieName + '=' + accessToken + '; ' + expires;\n    }\n\n    function clearAccessTokenCookie() {\n        setAccessTokenCookie('', -1);\n    }\n\n    function refreshAccessTokenCookie() {\n        if (settings.refreshAccessTokenUrl) {\n            return $.get(settings.refreshAccessTokenUrl);\n        }\n\n        return false;\n    }\n});\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/auth.js\n ** module id = 16\n ** module chunks = 0\n **/","define(function() {\n\n    'use strict';\n    var levelClass = {\n        debug: 0,\n        info: 1000,\n        warn: 2000,\n        error: 3000\n    };\n    var notifications = {\n        startInfo: {\n            code: 1001,\n            level: 'info',\n            message: 'Request Start : $0 $1'\n        },\n        redirectInfo: {\n            code: 1002,\n            level: 'info',\n            message: 'Redirection followed'\n        },\n        successInfo: {\n            code: 1003,\n            level: 'info',\n            message: 'Request Success'\n        },\n        uploadProgressInfo: {\n            code: 1004,\n            level: 'info',\n            message: 'Bytes $1 from $2 uploaded ($0%)'\n        },\n        uploadSuccessInfo: {\n            code: 1005,\n            level: 'info',\n            message: 'Upload Success'\n        },\n\n        commWarning: {\n            code: 2001,\n            level: 'warn',\n            message: 'Communication error (status code $0). Retrying ($1/$2).'\n        },\n        authWarning: {\n            code: 2002,\n            level: 'warn',\n            message: 'Authentication error (status code $0). Refreshing access token ($1/$2).'\n        },\n\n        reqError: {\n            code: 3001,\n            level: 'error',\n            message: 'Request error (status code $0).'\n        },\n        commError: {\n            code: 3002,\n            level: 'error',\n            message: 'Communication error (status code $0).  Maximun number of retries reached ($1).'\n        },\n        authError: {\n            code: 3003,\n            level: 'error',\n            message: 'Authentication error (status code $0).  Maximun number of retries reached ($1).'\n        },\n        refreshNotConfigured: {\n            code: 3004,\n            level: 'error',\n            message: 'Refresh token error. Refresh flow not configured.'\n        },\n        refreshError: {\n            code: 3005,\n            level: 'error',\n            message: 'Refresh token error. Request failed (status code $0).'\n        },\n        tokenError: {\n            code: 3006,\n            level: 'error',\n            message: 'Missing access token.'\n        },\n        parseError: {\n            code: 3007,\n            level: 'error',\n            message: 'JSON Parsing error.'\n        },\n        uploadError: {\n            code: 3008,\n            level: 'error',\n            message: 'Upload $0 ($1 %)'\n        }\n    };\n\n    function createMessage(notificationId, notificationData, request, response) {\n        var notification = $.extend({}, notifications[notificationId] || {});\n\n        if (notificationData) {\n            notification.message =  notification.message.replace(/\\$(\\d+)/g, function(m, key) {\n                return '' + (notificationData[+key] !== undefined ? notificationData[+key] : '');\n            });\n        }\n        if (request) {\n            notification.request = request;\n        }\n        if (response) {\n            notification.response = response;\n        }\n        return notification;\n    }\n\n    function createNotifier(logger, minLogLevel) {\n        if (!logger || typeof logger !== 'function') {\n            return false;\n        }\n        var minCode = levelClass[minLogLevel] || 0;\n\n        return {\n            notify: function notify(notificationId, notificationData, request, response) {\n                var notification = createMessage(notificationId, notificationData, request, response);\n                if(notification.code > minCode) {\n                    logger(notification);\n                }\n\n            }\n        };\n    }\n\n    return {\n        createNotifier: createNotifier\n        };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/notifier.js\n ** module id = 17\n ** module chunks = 0\n **/"],"sourceRoot":""}